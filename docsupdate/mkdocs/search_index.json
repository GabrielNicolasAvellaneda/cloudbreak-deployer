{
    "docs": [
        {
            "location": "/", 
            "text": "Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand HDP clusters in different virtual environments. Once it is deployed in your favorite servlet container exposes a REST API allowing to span up Hadoop clusters of arbitrary sizes on your selected cloud provider. Provisioning Hadoop has never been easier.\nCloudbreak is built on the foundation of cloud providers API (Microsoft Azure, Amazon AWS, Google Cloud Platform, OpenStack), Apache Ambari, Docker containers, Swarm and Consul.\n\n\nFor a detailed overview please follow this \nlink\n\n\nFor recent changes please check the \nchangelog\n.\n\n\nCloudbreak has two main components - the \nCloudbreak deployer\n and the \nCloudbreak application\n. Cloudbreak deployer helps you to deploy the Cloudbreak application automatically in environments with Docker support. Once the Cloudbreak application is deployed you can use it to provision HDP clusters in different cloud environments.\n\n\nTechnology\n\n\nFor an architectural overview of the CLoudbreak deployer and application please follow this \nlink\n\n\nInstallation\n\n\nCurrently only \nLinux\n and \nOSX\n 64 bit binaries are released for Cloudbreak Deployer. For anything else we can create a special Docker container. The deployment itself needs only \nDocker 1.7.0\n or later.\n\n\nDIY installation\n\n\nFor on premise installations of the Cloudbreak application please follow the \nlink\n\n\nAWS based installation\n\n\nWe have pre-built custom cloud images with Cloudbreak deployer pre-configured. Following the steps will guide you through the provider specific configuration and launching clusters using that provider.\n\n\nYou can follow the AWS provider specific documentation using this \nlink\n\n\nAzure based installation\n\n\nWe have pre-built custom cloud images with Cloudbreak deployer pre-configured. Following the steps will guide you through the provider specific configuration and launching clusters using that provider.\n\n\nYou can follow the AWS provider specific documentation using this \nlink\n\n\nGCP based installation\n\n\nWe have pre-built custom cloud images with Cloudbreak deployer pre-configured. Following the steps will guide you through the provider specific configuration and launching clusters using that provider.\n\n\nYou can follow the AWS provider specific documentation using this \nlink\n\n\nOpenStack based installation\n\n\nWe have pre-built custom cloud images with Cloudbreak deployer pre-configured. Following the steps will guide you through the provider specific configuration and launching clusters using that provider.\n\n\nYou can follow the AWS provider specific documentation using this \nlink\n\n\nMisc\n\n\nDebug\n\n\nIf you want to have more detailed output set the \nDEBUG\n env variable to non-zero:\n\n\nDEBUG=1 cbd some_command\n\n\n\n\nTroubleshoot\n\n\nYou can also use the \ndoctor\n command to diagnose your environment:\n\n\ncbd doctor\n\n\n\n\nLogs\n\n\nFor logs use the :\n\n\ncbd logs\n\n\n\n\nUpdate\n\n\nThe tool is capable to upgrade itself to a newer version.\n\n\ncbd update\n\n\n\n\nCredits\n\n\nThis tool, and the PR driven release, is inspired from \nglidergun\n. Actually it\ncould be a fork of it. The reason it\u2019s not a fork, because we wanted to have our own binary with all modules\nbuilt in, so only a single binary is needed.", 
            "title": "Home"
        }, 
        {
            "location": "/#technology", 
            "text": "For an architectural overview of the CLoudbreak deployer and application please follow this  link", 
            "title": "Technology"
        }, 
        {
            "location": "/#installation", 
            "text": "Currently only  Linux  and  OSX  64 bit binaries are released for Cloudbreak Deployer. For anything else we can create a special Docker container. The deployment itself needs only  Docker 1.7.0  or later.  DIY installation  For on premise installations of the Cloudbreak application please follow the  link  AWS based installation  We have pre-built custom cloud images with Cloudbreak deployer pre-configured. Following the steps will guide you through the provider specific configuration and launching clusters using that provider.  You can follow the AWS provider specific documentation using this  link  Azure based installation  We have pre-built custom cloud images with Cloudbreak deployer pre-configured. Following the steps will guide you through the provider specific configuration and launching clusters using that provider.  You can follow the AWS provider specific documentation using this  link  GCP based installation  We have pre-built custom cloud images with Cloudbreak deployer pre-configured. Following the steps will guide you through the provider specific configuration and launching clusters using that provider.  You can follow the AWS provider specific documentation using this  link  OpenStack based installation  We have pre-built custom cloud images with Cloudbreak deployer pre-configured. Following the steps will guide you through the provider specific configuration and launching clusters using that provider.  You can follow the AWS provider specific documentation using this  link", 
            "title": "Installation"
        }, 
        {
            "location": "/#misc", 
            "text": "Debug  If you want to have more detailed output set the  DEBUG  env variable to non-zero:  DEBUG=1 cbd some_command  Troubleshoot  You can also use the  doctor  command to diagnose your environment:  cbd doctor  Logs  For logs use the :  cbd logs  Update  The tool is capable to upgrade itself to a newer version.  cbd update", 
            "title": "Misc"
        }, 
        {
            "location": "/#credits", 
            "text": "This tool, and the PR driven release, is inspired from  glidergun . Actually it\ncould be a fork of it. The reason it\u2019s not a fork, because we wanted to have our own binary with all modules\nbuilt in, so only a single binary is needed.", 
            "title": "Credits"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuration\n\n\nConfiguration is based on environment variables. Cloudbreak Deployer always forks a new bash subprocess \nwithout\ninheriting environment variables\n. The only way to set ENV vars relevant for Cloudbreak Deployer is to set them\nin a file called \nProfile\n.\n\n\nTo see all available config variables with their default value:\n\n\ncbd env show\n\n\n\n\nThe \nProfile\n will be simple \nsourced\n in bash terms, so you can use the usual syntaxes to set config values:\n\n\nexport MY_VAR=some_value\nexport OTHER_VAR=dunno\n\n\n\n\nEnv specific Profile\n\n\nLet\u2019s say you want to use a different version of Cloudbreak for \nprod\n and \nqa\n profile.\nYou can specify the Docker image tag via: \nDOCKER_TAG_CLOUDBREAK\n.\n\nProfile\n is always sourced, so you will have two env specific configurations:\n- \nProfile.dev\n\n- \nProfile.qa\n\n\nFor prod you need:\n\n\n\n\ncreate a file called \nProfile.prod\n\n\nwrite the env specific \nexport DOCKER_TAG_CLOUDBREAK=0.3.99\n into \nProfile.prod\n\n\nset the env variable: \nCBD_DEFAULT_PROFILE=prod\n\n\n\n\nTo use the \nprod\n specific profile once:\n\n\nCBD_DEFAULT_PROFILE=prod cbd some_commands\n\n\n\n\nFor permanent setting you can \nexport CBD_DEFAULT_PROFILE=prod\n in your \n.bash_profile\n.\n\n\nAvailable Configurations\n\n\nSMTP\n\n\nPut these lines into your \nProfile\n\n\nexport CLOUDBREAK_SMTP_SENDER_USERNAME=\nexport CLOUDBREAK_SMTP_SENDER_PASSWORD=\nexport CLOUDBREAK_SMTP_SENDER_HOST=\nexport CLOUDBREAK_SMTP_SENDER_PORT=\nexport CLOUDBREAK_SMTP_SENDER_FROM=\n\n\n\n\nConsul\n\n\nConsul\n is used for dns resolution. All Cloudbreak related services are registered as\n\nsomeservice.service.consul\n. Consul\u2019s built in dns server is able to \u201cfall-back\u201d on an other dns server.\nThis option is called \n-recursor\n. Clodbreak Deployer first tries to discover the dns settings of the host,\nby looking for \nnameserver\n entry in \n/etc/resolv.conf\n. If it finds one consul will use it as a recursor,\notherwise \n8.8.8.8\n will be used.\n\n\nFor a full list of available consul config options, see the \ndocs\n\n\nYou can pass any additional consul configuration by defining a \nDOCKER_CONSUL_OPTIONS\n in \nProfile\n.\n\n\nList of configurations\n\n\n\n\nCB_AWS_AMI_MAP\n : tbd\n\n\nCB_AZURE_IMAGE_URI\n : tbd\n\n\nCB_BLUEPRINT_DEFAULTS\n : tbd\n\n\nCB_TEMPLATE_DEFAULTS\n : tbd\n\n\nCB_DB_ENV_DB\n : tbd\n\n\nCB_DB_ENV_PASS\n : tbd\n\n\nCB_DB_ENV_USER\n : tbd\n\n\nCB_GCP_SOURCE_IMAGE_PATH\n : tbd\n\n\nCB_HBM2DDL_STRATEGY\n : tbd\n\n\nCB_OPENSTACK_IMAGE\n : tbd\n\n\nDOCKER_TAG_ALPINE\n : tbd\n\n\nDOCKER_TAG_CBSHELL\n : tbd\n\n\nDOCKER_TAG_CLOUDBREAK\n : tbd\n\n\nDOCKER_TAG_CONSUL\n : tbd\n\n\nDOCKER_TAG_PERISCOPE\n : tbd\n\n\nDOCKER_TAG_POSTGRES\n : tbd\n\n\nDOCKER_TAG_REGISTRATOR\n : tbd\n\n\nDOCKER_TAG_SULTANS\n : tbd\n\n\nDOCKER_TAG_UAA\n : tbd\n\n\nDOCKER_TAG_ULUWATU\n : tbd\n\n\nPERISCOPE_DB_HBM2DDL_STRATEGY\n : tbd\n\n\n\n\nAzure Resource manager command\n\n\n\n\ncbd azure configure-arm\n\n\ncbd azure deploy-dash\n\nSee the documentation here\n\n\n\n\nCaveats\n\n\nThe \nCloudbreak Deployer\n tool opens a clean bash subshell, without inheriting environment vars.\nActually the following environment vars \nare\n inherited:\n\n\n\n\nHOME\n\n\nDEBUG\n\n\nTRACE\n\n\nCBD_DEFAULT_PROFILE\n\n\nall \nDOCKER_XXX", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configuration", 
            "text": "Configuration is based on environment variables. Cloudbreak Deployer always forks a new bash subprocess  without\ninheriting environment variables . The only way to set ENV vars relevant for Cloudbreak Deployer is to set them\nin a file called  Profile .  To see all available config variables with their default value:  cbd env show  The  Profile  will be simple  sourced  in bash terms, so you can use the usual syntaxes to set config values:  export MY_VAR=some_value\nexport OTHER_VAR=dunno", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#env-specific-profile", 
            "text": "Let\u2019s say you want to use a different version of Cloudbreak for  prod  and  qa  profile.\nYou can specify the Docker image tag via:  DOCKER_TAG_CLOUDBREAK . Profile  is always sourced, so you will have two env specific configurations:\n-  Profile.dev \n-  Profile.qa  For prod you need:   create a file called  Profile.prod  write the env specific  export DOCKER_TAG_CLOUDBREAK=0.3.99  into  Profile.prod  set the env variable:  CBD_DEFAULT_PROFILE=prod   To use the  prod  specific profile once:  CBD_DEFAULT_PROFILE=prod cbd some_commands  For permanent setting you can  export CBD_DEFAULT_PROFILE=prod  in your  .bash_profile .", 
            "title": "Env specific Profile"
        }, 
        {
            "location": "/configuration/#available-configurations", 
            "text": "", 
            "title": "Available Configurations"
        }, 
        {
            "location": "/configuration/#smtp", 
            "text": "Put these lines into your  Profile  export CLOUDBREAK_SMTP_SENDER_USERNAME=\nexport CLOUDBREAK_SMTP_SENDER_PASSWORD=\nexport CLOUDBREAK_SMTP_SENDER_HOST=\nexport CLOUDBREAK_SMTP_SENDER_PORT=\nexport CLOUDBREAK_SMTP_SENDER_FROM=", 
            "title": "SMTP"
        }, 
        {
            "location": "/configuration/#consul", 
            "text": "Consul  is used for dns resolution. All Cloudbreak related services are registered as someservice.service.consul . Consul\u2019s built in dns server is able to \u201cfall-back\u201d on an other dns server.\nThis option is called  -recursor . Clodbreak Deployer first tries to discover the dns settings of the host,\nby looking for  nameserver  entry in  /etc/resolv.conf . If it finds one consul will use it as a recursor,\notherwise  8.8.8.8  will be used.  For a full list of available consul config options, see the  docs  You can pass any additional consul configuration by defining a  DOCKER_CONSUL_OPTIONS  in  Profile .  List of configurations   CB_AWS_AMI_MAP  : tbd  CB_AZURE_IMAGE_URI  : tbd  CB_BLUEPRINT_DEFAULTS  : tbd  CB_TEMPLATE_DEFAULTS  : tbd  CB_DB_ENV_DB  : tbd  CB_DB_ENV_PASS  : tbd  CB_DB_ENV_USER  : tbd  CB_GCP_SOURCE_IMAGE_PATH  : tbd  CB_HBM2DDL_STRATEGY  : tbd  CB_OPENSTACK_IMAGE  : tbd  DOCKER_TAG_ALPINE  : tbd  DOCKER_TAG_CBSHELL  : tbd  DOCKER_TAG_CLOUDBREAK  : tbd  DOCKER_TAG_CONSUL  : tbd  DOCKER_TAG_PERISCOPE  : tbd  DOCKER_TAG_POSTGRES  : tbd  DOCKER_TAG_REGISTRATOR  : tbd  DOCKER_TAG_SULTANS  : tbd  DOCKER_TAG_UAA  : tbd  DOCKER_TAG_ULUWATU  : tbd  PERISCOPE_DB_HBM2DDL_STRATEGY  : tbd", 
            "title": "Consul"
        }, 
        {
            "location": "/configuration/#azure-resource-manager-command", 
            "text": "cbd azure configure-arm  cbd azure deploy-dash \nSee the documentation here", 
            "title": "Azure Resource manager command"
        }, 
        {
            "location": "/configuration/#caveats", 
            "text": "The  Cloudbreak Deployer  tool opens a clean bash subshell, without inheriting environment vars.\nActually the following environment vars  are  inherited:   HOME  DEBUG  TRACE  CBD_DEFAULT_PROFILE  all  DOCKER_XXX", 
            "title": "Caveats"
        }, 
        {
            "location": "/shell/", 
            "text": "todo ...", 
            "title": "Shell"
        }, 
        {
            "location": "/recipes/", 
            "text": "Cluster customization\n\n\nWith the help of Cloudbreak it is very easy to provision Hadoop clusters in the cloud from an Apache Ambari blueprint. Cloudbreak built in provisioning doesn't contain every use case, so we are introducing the concept of recipes.\nRecipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation. With recipes it's quite easy for example to put a JAR file on the Hadoop classpath or run some custom scripts.\nIn Cloudbreak we supports two ways to configure recipe, we have downloadable and stored recipes. A downloadable recipe should be available on HTTP, HTTPS protocols optionally with basic authentication, or any kind of public Git repository.\nAs the name mentions stored recipes are uploaded and stored in Cloudbreak with (Clodbreak shell)[https://github.com/sequenceiq/cloudbreak-shell]. \nUluwatu\n support coming soon.\n\n\nDownloadable recipes\n\n\nThis kind of recipe must contain a plugin.toml file, with some basic information about the recipe, and at least a recipe-pre-install or recipe-post-install script.\nContent of plugin.toml\n\n\n[plugin]\nname = \n[recipe-name]\n\ndescription = \n[description-of-the-recipe]\n\nversion = \n1.0\n\nmaintainer_name = \n[maintainer-name]\n\nmaintainer_email = \n[maintainer-email]\n\nwebsite_url = \n[website-url]\n\n\n\n\n\nPre and post scripts are regular shell scripts, and must be executable.\n\n\nTo configure recipe or recipe groups in Cloudbreak you have to create a descriptive JSON file and send it to Cloudbreak via our shell.\n\n\n{\n  \nname\n: \n[recipe-name]\n,\n  \ndescription\n: \n[description-of-the-recipe]\n,\n  \nproperties\n: {\n    \n[key]\n: \n[value]\n\n  },\n  \nplugins\n: {\n      \ngit://github.com/account/recipe.git\n: \nONE_NODE\n\n      \nhttp://user:password@mydomain.com/my-recipe.tar\n: \nALL_NODES\n\n      \nhttps://mydomain.com/my-recipe.zip\n: \nALL_NODES\n\n  }\n}\n\n\n\n\nAt this point we need to understand some element of the JSON above.\n\n\nFirst of all properties. Properties are saved to Consul key/value store, and they are available from the pre or post script by fetching http://localhost:8500/v1/kv/[key]?raw url. The limitation of the value's base64 representation is 512kB. This option is a good choice if you want to write reusable recipes.\n\n\nThe next one is plugins. As you read before we support a few kind of protocols, and each of them has their own limitations:\n\n\n\n\n\n\nGit\n\n\n\n\ngit repository must be public (or available from the cluster)\n\n\nthe recipe files must be on the root\n\n\nonly repository default branch supported, there is no opportunity to check out different branch\n\n\n\n\n\n\n\n\nHTTP(S)\n\n\n\n\non this kind of protocols you have to bundle your recipe into a tar or zip file\n\n\nbasic authentication is the only way to protect recipe from public\n\n\n\n\n\n\n\n\nLast one is the execution type of the recipe. We supports two options:\n\n\n\n\nONE_NODE means the recipe will execute only one node in the hostgroup\n\n\nAll_NODES runs every single instance in the hostgroup.\n\n\n\n\nTo add recipe use the command(s) below:\n\n\nrecipe add --file /path/of/the/recipe/json\n\n\n\n\nor\n\n\nrecipe add --url http(s)://mydomain.com/my-recipe.json\n\n\n\n\nAdd command has an optional parameter --publicInAccount, flags if the template is public in the account.\n\n\nStored recipes\n\n\nThe easiest way to create a custom recipe in Cloudbreak is stored recipes. Create your own pre and/or post scripts, and upload them via shell. In the background Cloudbreak pushes recipe to Consul key/value store during cluster creation.\nStored recipes has the same size limitation like properties in downloadable recipe, because of the key/value store, the base64 encoded contents of the scripts must be less then 512kB.\n\n\nrecipe store --name [recipe-name] --executionType [ONE_NODE|ALL_NODES] --preInstallScriptFile /path/of/the/pre-install-script --postInstallScriptFile /path/of/the/post-install-script\n\n\n\n\nThis command has two optional parameters:\n- --description \"string\": description of the recipe\n- --timeout \"integer\": timeout of the script execution\n- --publicInAccount \"flag\": flags if the template is public in the account\n\n\nRecipes are ready to attach to a hostgroup, for more information about hostgroups please jump to \nCreate cluster\n section or visit the shell \ndocumentation\n.", 
            "title": "Recipes"
        }, 
        {
            "location": "/recipes/#cluster-customization", 
            "text": "With the help of Cloudbreak it is very easy to provision Hadoop clusters in the cloud from an Apache Ambari blueprint. Cloudbreak built in provisioning doesn't contain every use case, so we are introducing the concept of recipes.\nRecipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation. With recipes it's quite easy for example to put a JAR file on the Hadoop classpath or run some custom scripts.\nIn Cloudbreak we supports two ways to configure recipe, we have downloadable and stored recipes. A downloadable recipe should be available on HTTP, HTTPS protocols optionally with basic authentication, or any kind of public Git repository.\nAs the name mentions stored recipes are uploaded and stored in Cloudbreak with (Clodbreak shell)[https://github.com/sequenceiq/cloudbreak-shell].  Uluwatu  support coming soon.  Downloadable recipes  This kind of recipe must contain a plugin.toml file, with some basic information about the recipe, and at least a recipe-pre-install or recipe-post-install script.\nContent of plugin.toml  [plugin]\nname =  [recipe-name] \ndescription =  [description-of-the-recipe] \nversion =  1.0 \nmaintainer_name =  [maintainer-name] \nmaintainer_email =  [maintainer-email] \nwebsite_url =  [website-url]   Pre and post scripts are regular shell scripts, and must be executable.  To configure recipe or recipe groups in Cloudbreak you have to create a descriptive JSON file and send it to Cloudbreak via our shell.  {\n   name :  [recipe-name] ,\n   description :  [description-of-the-recipe] ,\n   properties : {\n     [key] :  [value] \n  },\n   plugins : {\n       git://github.com/account/recipe.git :  ONE_NODE \n       http://user:password@mydomain.com/my-recipe.tar :  ALL_NODES \n       https://mydomain.com/my-recipe.zip :  ALL_NODES \n  }\n}  At this point we need to understand some element of the JSON above.  First of all properties. Properties are saved to Consul key/value store, and they are available from the pre or post script by fetching http://localhost:8500/v1/kv/[key]?raw url. The limitation of the value's base64 representation is 512kB. This option is a good choice if you want to write reusable recipes.  The next one is plugins. As you read before we support a few kind of protocols, and each of them has their own limitations:    Git   git repository must be public (or available from the cluster)  the recipe files must be on the root  only repository default branch supported, there is no opportunity to check out different branch     HTTP(S)   on this kind of protocols you have to bundle your recipe into a tar or zip file  basic authentication is the only way to protect recipe from public     Last one is the execution type of the recipe. We supports two options:   ONE_NODE means the recipe will execute only one node in the hostgroup  All_NODES runs every single instance in the hostgroup.   To add recipe use the command(s) below:  recipe add --file /path/of/the/recipe/json  or  recipe add --url http(s)://mydomain.com/my-recipe.json  Add command has an optional parameter --publicInAccount, flags if the template is public in the account.  Stored recipes  The easiest way to create a custom recipe in Cloudbreak is stored recipes. Create your own pre and/or post scripts, and upload them via shell. In the background Cloudbreak pushes recipe to Consul key/value store during cluster creation.\nStored recipes has the same size limitation like properties in downloadable recipe, because of the key/value store, the base64 encoded contents of the scripts must be less then 512kB.  recipe store --name [recipe-name] --executionType [ONE_NODE|ALL_NODES] --preInstallScriptFile /path/of/the/pre-install-script --postInstallScriptFile /path/of/the/post-install-script  This command has two optional parameters:\n- --description \"string\": description of the recipe\n- --timeout \"integer\": timeout of the script execution\n- --publicInAccount \"flag\": flags if the template is public in the account  Recipes are ready to attach to a hostgroup, for more information about hostgroups please jump to  Create cluster  section or visit the shell  documentation .", 
            "title": "Cluster customization"
        }, 
        {
            "location": "/kerberos/", 
            "text": "Kerberos security\n\n\nAmbari supports Kerberos security for internal communication. To activate Kerberos with Cloudbreak you have enable security option and fill the \nkerberos master key\n, \nkerberos admin\n and \nkerberos password\n too.\nTo run a job on the cluster, you can use one of the default Hadoop users, like \nambari-qa\n, as usual.\n\n\nOptional\n\n\nTo create custom users please follow the steps below.\n\n\n\n\nLog in via SSH to the Cloudbreak gateway node (IP address is the same as the Ambari UI)\n\n\n\n\nsudo docker exec -i kerberos bash\nkadmin -p [admin_user]/[admin_user]@NODE.DC1.CONSUL (type admin password)\naddprinc custom-user (type user password twice)\n\n\n\n\n\n\nLog in via SSH to all other nodes\n\n\n\n\nsudo docker exec -i $(docker ps | grep ambari-warmup | cut -d\n \n -f 1) bash\nuseradd custom-user\n\n\n\n\n\n\nLog in via SSH to one of the nodes\n\n\n\n\nsudo docker exec -i $(docker ps | grep ambari-warmup | cut -d\n \n -f 1) bash\nsu custom-user\nkinit -p custom-user (type user password)\nhdfs dfs -mkdir input\nhdfs dfs -put /tmp/wait-for-host-number.sh input\nyarn jar $(find /usr/hdp -name hadoop-mapreduce-examples.jar) wordcount input output\nhdfs dfs -cat output/*", 
            "title": "Kerberos"
        }, 
        {
            "location": "/kerberos/#kerberos-security", 
            "text": "Ambari supports Kerberos security for internal communication. To activate Kerberos with Cloudbreak you have enable security option and fill the  kerberos master key ,  kerberos admin  and  kerberos password  too.\nTo run a job on the cluster, you can use one of the default Hadoop users, like  ambari-qa , as usual.  Optional  To create custom users please follow the steps below.   Log in via SSH to the Cloudbreak gateway node (IP address is the same as the Ambari UI)   sudo docker exec -i kerberos bash\nkadmin -p [admin_user]/[admin_user]@NODE.DC1.CONSUL (type admin password)\naddprinc custom-user (type user password twice)   Log in via SSH to all other nodes   sudo docker exec -i $(docker ps | grep ambari-warmup | cut -d    -f 1) bash\nuseradd custom-user   Log in via SSH to one of the nodes   sudo docker exec -i $(docker ps | grep ambari-warmup | cut -d    -f 1) bash\nsu custom-user\nkinit -p custom-user (type user password)\nhdfs dfs -mkdir input\nhdfs dfs -put /tmp/wait-for-host-number.sh input\nyarn jar $(find /usr/hdp -name hadoop-mapreduce-examples.jar) wordcount input output\nhdfs dfs -cat output/*", 
            "title": "Kerberos security"
        }, 
        {
            "location": "/database/", 
            "text": "Migrate the databases\n\n\nCreate the database schema or migrate it to the latest version:\n\n\ncbd startdb\ncbd migrate cbdb up\n\n\n\n\nVerify that all scripts have been applied:\n\n\ncbd migrate cbdb status\n\n\n\n\ncbd generate\ncbd migrate cbdb up", 
            "title": "Database"
        }, 
        {
            "location": "/development/", 
            "text": "Contribution\n\n\nDevelopment process should happen on separate branches. Then a pull-request should be opened as usual.\n\n\nTo build the project\n\n\n# make deps needed only once\nmake deps\n\nmake install\n\n\n\n\nTo run the unit tests:\n\n\nmake tests\n\n\n\n\nIf you want to test the binary CircleCI build from your branch named \nfix-something\n, to validate the PR binary \ncbd\n tool will be tested. It is built by CircleCI for each branch.\n\n\ncbd update fix-something\n\n\n\n\nTesting\n\n\nShell scripts shouldn\u2019t raise exceptions when it comes to unit testing. \nbasht\n is used for testing. See the reasoning: \nwhy not bats or shunit2\n\n\nPlease cover your bash functions with unit tests and run test with:\n\n\nmake tests\n\n\n\n\nRelease Process of the Clodbreak Deployer tool\n\n\nThe master branch is always built on \nCircleCI\n.\nWhen you wan\u2019t a new release, all you have to do:\n\n\nmake release-next-ver\n\n\n\n\nmake release-next-ver\n performs the following steps:\n\n\n\n\non the \nmaster\n branch:\n\n\nUpdates the \nVERSION\n file by increasing the \npatch\n version number (for example from 0.5.2 to 0.5.3)\n\n\nUpdates \nCHANGELOG.md\n with the release date\n\n\n\n\nCreates a new \nUnreleased\n section in top of \nCHANGELOG.md\n\n\n\n\n\n\nCreates a PullRequest for the release branch:\n\n\n\n\ncreate a new branch with a name like \nrelease-0.5.x\n\n\nthis branch should be the same as \norigin/master\n\n\ncreate a pull request into \nrelease\n branch\n\n\n\n\nAcceptance\n\n\nNow you should test this release. You can get it by \ncbd update release-x.y.z\n. Comment with LGTM (Looking Good To Me).\n\n\nOnce the PR is merged, CircleCI will:\n- create a new release on \nGitHub releases tab\n, with the help of \ngh-release\n.\n- it will create the git tag with \nv\n prefix like: \nv0.0.3", 
            "title": "Development"
        }, 
        {
            "location": "/development/#contribution", 
            "text": "Development process should happen on separate branches. Then a pull-request should be opened as usual.  To build the project  # make deps needed only once\nmake deps\n\nmake install  To run the unit tests:  make tests  If you want to test the binary CircleCI build from your branch named  fix-something , to validate the PR binary  cbd  tool will be tested. It is built by CircleCI for each branch.  cbd update fix-something", 
            "title": "Contribution"
        }, 
        {
            "location": "/development/#testing", 
            "text": "Shell scripts shouldn\u2019t raise exceptions when it comes to unit testing.  basht  is used for testing. See the reasoning:  why not bats or shunit2  Please cover your bash functions with unit tests and run test with:  make tests", 
            "title": "Testing"
        }, 
        {
            "location": "/development/#release-process-of-the-clodbreak-deployer-tool", 
            "text": "The master branch is always built on  CircleCI .\nWhen you wan\u2019t a new release, all you have to do:  make release-next-ver  make release-next-ver  performs the following steps:   on the  master  branch:  Updates the  VERSION  file by increasing the  patch  version number (for example from 0.5.2 to 0.5.3)  Updates  CHANGELOG.md  with the release date   Creates a new  Unreleased  section in top of  CHANGELOG.md    Creates a PullRequest for the release branch:   create a new branch with a name like  release-0.5.x  this branch should be the same as  origin/master  create a pull request into  release  branch   Acceptance  Now you should test this release. You can get it by  cbd update release-x.y.z . Comment with LGTM (Looking Good To Me).  Once the PR is merged, CircleCI will:\n- create a new release on  GitHub releases tab , with the help of  gh-release .\n- it will create the git tag with  v  prefix like:  v0.0.3", 
            "title": "Release Process of the Clodbreak Deployer tool"
        }, 
        {
            "location": "/changelog/", 
            "text": "Unreleased\n\n\nFixed\n\n\n\n\nconsul recursor now exculdes both docker ip and bridge ip to avoid recursive dns recursor chain\n\n\ndocs fixed about getting default credentials (cbd login)\n\n\n\n\nAdded\n\n\n\n\nCommand \ncbd azure configure-arm\n will create your arm application which can used by cloudbreak\n\n\nCommand \ncbd azure deploy-dash\n will deploy a dash application in your Azure account\n\n\nCommand \ncbd start\n will execute the migration by default. If SKIP_DB_MIGRATION_ON_START envvar set to true in Profile, the migration will be skipped\n\n\nUsing Dns SRV record in our services instead of ambassador\n\n\nUsing docker linking system in third party services instead of ambassador\n\n\nIntegration tests are added, where cbd binary is called, not only sourced functions\n\n\nDocker based CentOS integration test make target added\n\n\nUaa db migration\n\n\n\n\nRemoved\n\n\n\n\nFull removal of ambassador\n\n\n\n\nChanged\n\n\n\n\ncbd start\n doesn\u2019t start if compose yaml regeneration is needed\n\n\ncbd generate\n is less verbose, diff doesnt shown\n\n\ncbd doctor\n shows diff if generate would change\n\n\ncbd regenerate\n creates backup files if changes detected\n\n\nsequenceiq/uaadb:1.0.1 is used instead of postgres:9.4.1\n\n\n\n\n[v1.0.3] - 2015-09-03\n\n\nFixed\n\n\n\n\nAuthentication error with \ncloudbreak-shell\n and \ncloudbreak-shell-quiet\n is fixed\n\n\nCommand \ncbd update \nbranch\n checks for artifact\n\n\n\n\nAdded\n\n\n\n\nbinary version of gnu-sed 4.2.2 is now included, to solve lot of osx/busybox issues\n\n\nconsul recursor test are added\n\n\n\n\nRemoved\n\n\nChanged\n\n\n\n\n\n\nsequenceiq/cloudbreak image updated to 1.0.3\n\n\n\n\n\n\ndebug() function made multiline capable. Use \\n in messages\n\n\n\n\nrefactor bridge ip discovery to run helper docker command only once\n\n\nconsul recursor handling refactored to be more robust\n\n\n\n\n[v1.0.2] - 2015-08-25\n\n\nFixed\n\n\nAdded\n\n\n\n\nDOCKER_CONSUL_OPTIONS\n config option to provide arbitrary consul option\n\n\n\n\nRemoved\n\n\nChanged\n\n\n\n\nFixed docker version checker to be 1.8.1 compatible. (docker added --format option)\n\n\nsequenceiq/cloudbreak image updated to 1.0.2\n\n\nconsul image changed from sequenceiq/consul to gliderlabs/consul\n\n\nconsul image updated to 0.5.2 (from 0.5.0)\n\n\nconsul discovers host dns settings, and uses the configured nameserver as recursor\n\n\n\n\n[v1.0.0] - 2015-08-15\n\n\nFixed\n\n\nAdded\n\n\nRemoved\n\n\nChanged\n\n\n[v1.0.0] - 2015-07-23\n\n\nFixed\n\n\n\n\nGA Release\n\n\n\n\nAdded\n\n\nRemoved\n\n\nChanged\n\n\n[v0.5.8] - 2015-07-23\n\n\nFixed\n\n\n\n\nFix CircleCI release. CircleCI doesn\u2019t allow --rm on docker run\n\n\n\n\nAdded\n\n\nRemoved\n\n\nChanged\n\n\n[v0.5.7] - 2015-07-23\n\n\nFixed\n\n\n\n\nFix make release dependency\n\n\nFix CHANGELOG generation at \nmake release-next-ver\n avoid inserting extra -e\n\n\n\n\nAdded\n\n\nRemoved\n\n\nChanged\n\n\n[v0.5.6] - 2015-07-23\n\n\nFixed\n\n\nAdded\n\n\n\n\nRelease artifacts are published at public-repo-1.hortonworks.com/HDP/cloudbreak/\n\n\n\n\nRemoved\n\n\nChanged\n\n\n[v0.5.5] - 2015-07-10\n\n\nFixed\n\n\nAdded\n\n\n\n\nCommand \npull-parallel\n added for quicker/simultaneous image pull\n\n\nRelease process includes upload to public-repo s3 bucket\n\n\n\n\nRemoved\n\n\nChanged\n\n\n\n\nLicense changed from MIT to Apache v2\n\n\nrelease artifact includes additional files: license/readme/notes\n\n\n\n\n[v0.5.4] - 2015-07-03\n\n\nFixed\n\n\nAdded\n\n\n\n\nNew \ncbd-cleanup\n command for removing old images or exited containers\n\n\nBaywatch default parameters added: \nCB_BAYWATCH_ENABLED\n and\nCB_BAYWATCH_EXTERN_LOCATION\n\n\nLogs are saved via lospout\n\n\nTLS client certificate needed by Cloudbreak is generated with \ncbd generate\n\n\nCommand \naws delete-role\n added\n\n\nCommand \naws generate-role\n added\n\n\nCommand \naws show-role\n added\n\n\nCommand \ncloudbreak-shell\n added\n\n\nCommand \ncloudbreak-shell-quiet\n added\n\n\nCommand \nlocal-dev\n added\n\n\nCommand \ntoken\n added\n\n\n\n\nRemoved\n\n\nChanged\n\n\n\n\nAWS authentication env varibale is fixed to use the correct AWS_SECRET_ACCESS_KEY (instead the old AWS_SECRET_KEY)\n\n\nUsing sequenceiq/ambassadord:0.5.0 docker image instead of progrium/ambassadord:latest\n\n\n\n\n[v0.5.3] - 2015-06-03\n\n\nFixed\n\n\n\n\nOne-liner installer fixed, to work if previous cbd exists on path.\n\n\ncbd update\n upstream changes on go-bahser broke the selfupdate functionality\n\n\nIn some environment cloudbreak starts really slow. See: \ndetails\n, see: \ncommit\n\n\n\n\nAdded\n\n\n\n\nNew release proposal can be done by \nmake release-next-ver\n\n\n\n\nRemoved\n\n\nChanged\n\n\n[v0.5.2] - 2015-05-21\n\n\nFixed\n\n\nAdded\n\n\nRemoved\n\n\nChanged\n\n\n\n\nCommand \ndoctor\n hints to run boot2docker shellinit if env is unset\n\n\nCommand \ninit\n in case of OSX, DOCKER_XXX envs are initialized in local profile (Profile)\n\n\nDefault docker images are updated to:\n\n\nsequenceiq/cloudbreak:0.5.93\n\n\nsequenceiq/cbdb:0.5.92\n\n\nsequenceiq/uluwatu:0.5.28\n\n\nsequenceiq/sultans:0.5.3\n\n\nsequenceiq/periscope:0.5.5\n\n\n\n\n\n\n\n\n[v0.5.1] - 2015-05-18\n\n\nFixed\n\n\n\n\nIssue #55: Sed handles more robust the issue with: curl includes an extra CR char in header fields.\n\n\n\n\nAdded\n\n\nRemoved\n\n\n\n\ndeployer doesn\u2019t specify cloud specific image defaults. If left empty, they fall back\n  to defaults specified in \njava code\n\n\nCB_AZURE_IMAGE_URI\n\n\nCB_AWS_AMI_MAP\n\n\nCB_OPENSTACK_IMAGE\n\n\nCB_GCP_SOURCE_IMAGE_PATH\n\n\n\n\n\n\n\n\nChanged\n\n\n\n\nCommand \nlogs\n got usage example for specifying servies as filter\n\n\nDefault docker images are updated to:\n\n\nsequenceiq/cloudbreak:0.5.49\n\n\nsequenceiq/uluwatu:0.5.16\n\n\nsequenceiq/sutans:0.5.2\n\n\n\n\n\n\n\n\n[v0.5.0] - 2015-05-08\n\n\nFixed\n\n\n\n\nCommand \npull\n generates yaml files in case they are missing #31\n\n\n\n\nAdded\n\n\n\n\nCommand \nlogin\n Shows Uluwatu login url and credentials\n\n\nCommand \nregenerate\n deletes and generates docker-compose.yml and uaa.yml\n\n\nCommand \ndelete\n added: deletes yamls and dbs\n\n\nCommand \ncloudbreak-shell\n added, right now it internale use DEBUG=1 fn fn-call\n\n\nCommand \nversion\n does correct \nSemantic Versioning\n check to advise an upgrade\n\n\nCommand \ngenerate\n checks and shows if Profile change would result in yaml change.\n\n\nCommand \nstart\n: prints uluwatu url and credential hint\n\n\nCommand \ndoctor\n: fixes boot2docker date/time if not the same as on the host\n\n\nInternal command: \nbrowse\n added to be able to automatically open a browser to a specified url.\n\n\nMini Getting Started guide added into README\n\n\nmake dev-debug\n installs a special cbd on local OSX, which doesn\u2019t includes *.bash scrips, only refers them\n   by path. No need to \nmake dev\n to test small changes in bash scripts.\n\n\nLoad AWS key and AWS id from Profile\n\n\nCommand \ninit\n helps to guess the PUBLIC_IP in public clouds: google, amazon\n\n\n\n\nRemoved\n\n\nChanged\n\n\n\n\nCommand \ncbd env export\n adds export to the begining of each line\n\n\ncbd logs accepts optional [services] parameter\n\n\ndocker-compose uses \ncbreak_\n prefix for container naming instead of the directory name\n\n\nCommand \ngenerate\n prints out some more usefull info\n\n\nuaa.yml generation wont overwrite, just instruct to move existing file (like docker-compose.yml generation)\n\n\nCommand \ninit\n hint fixed on linux.\n\n\nCommand \ninit\n advise to run \ngenerate\n if it finds a Profile\n\n\nCommand \ninit\n set PRIVATE_IP the same as PUBLIC_IP for boot2docker\n\n\nCommand \nmigrate\n is introduced for db migration see \nMigrate the databases\n section of README\n\n\nCommand \nstartdb\n starts the cbdb and pcdb database containers only\n\n\nDatabases are not deleted after boot2docker restart\n\n\nImport ULU_HOST_ADDRESS and ULU_SULTANS_ADDRESS from Profile\n\n\n\n\n[v0.1.0] - 2015-04-16\n\n\nFixed\n\n\n\n\nSelfupdate updates the actual running binary intead of the fixed /us/local/bin/cbd\n\n\nSMTP default port is 25, to fix number conversion exception\n\n\n\n\nAdded\n\n\n\n\nCommand \ninit\n creates Profile\n\n\nInstall cbd to a directory which is available on $PATH\n\n\nDocker based test for the one-liner install from README.md: \nmake install-test\n\n\n\n\nRemoved\n\n\n\n\nupdate-snap\n command removed, replaced by parametrized \nupdate\n\n\n\n\nChanged\n\n\n\n\nCloudbreak/Persicope/Uluwatu/Sultans Dcoker images upgraded to 0.4.x\n\n\nUse the built in 'checksum' function instead of the external 'shasum' to generate secrets\n\n\nCommand \nupdate\n by default updates from latest Github release, parameter can point to branch on CircleCI\n\n\nDOCKER_XXX env varibles are inherited, so they not needed in Profile\n\n\ngenerate\n and compose specific commands are only available when \nProfile\n exists\n\n\ngenerate\n command genertes docker-compose.yml \nand\n uaa.yml\n\n\nPRIVATE_IP\n env var defaults to bridge IP (only PUBLC_IP is required in Profile)\n\n\nuse \nsulans-bin\n docker image istead of sultans\n\n\n\n\n[v0.0.9] - 2015-04-14\n\n\nFixed\n\n\n\n\nBash 4.3 is included in the binary, extracted into .deps/bin upon start\n\n\n\n\nAdded\n\n\nRemoved\n\n\nChanged\n\n\n[v0.0.8] - 2015-04-13\n\n\nFixed\n\n\n\n\nFixing deps module, golang fn: checksum added\n\n\nCircleCI mdule defines required jq\n\n\nFixing PATH issue for binary deps\n\n\n\n\nAdded\n\n\n\n\nuaadb start added\n\n\nidentity server start added\n\n\nmake dev\n added to mac based development\n\n\npull\n command added\n\n\nlogs\n command added\n\n\n\n\nRemoved\n\n\nChanged\n\n\n\n\nDocker containers are managed by \ndocker-compose\n\n\n\n\n[v0.0.7] - 2015-03-26\n\n\nFixed\n\n\nAdded\n\n\n\n\nmake tests\n runs unit tests\n\n\ndocker unit tests are added\n\n\nstart command added: WIP consul, registrator starts\n\n\nkill command addd: stops and removes cloudbreak specific containers\n\n\nSKIP_XXX skips the container start\n\n\n\n\nRemoved\n\n\nChanged\n\n\n\n\nenv command namespace is always exported, not only in DEBUG mode\n\n\nenv export: machine friendly config list\n\n\nenv show: human readable config list\n\n\ncircle runs unit tests\n\n\nsnapshot binaries include branch name in version string\n\n\n\n\n[v0.0.6] - 2015-03-25\n\n\nFixed\n\n\n\n\nremoved dos2unix dependency for the update command\n\n\n\n\nAdded\n\n\n\n\ndoctor command added\n\n\ndocker-check-version command added\n\n\ncci-latest accepts branch as parameter, needed for PR testing\n\n\nexport fn command in DEBUG mode\n\n\nexport env command in DEBUG mode\n\n\ndoctor: add instruction about setting DOCKER_XXX env vars in Profile\n\n\ninfo() function added to print green text to STDOUT\n\n\n\n\nRemoved\n\n\nChanged\n\n\n\n\nHOME env var is also inherited (boot2docker version failed)\n\n\nrelease process fully automatized\n\n\n\n\n[v0.0.5] - 2015-03-23\n\n\n\n\nupdate\n command works without dos2unix\n\n\n\n\n[v0.0.4] - 2015-03-23\n\n\nFixed\n\n\n\n\ndebug function fixed\n\n\nDEBUG, TRACE and CBD_DEFAULT_PROFILE env vars are inherited\n\n\n\n\nAdded\n\n\n\n\nProfile handling added with docs\n\n\nOne-liner install added\n\n\nDocs: install and update process described\n\n\nDocs: release process described with sample git commands\n\n\nPrint version number in debug mode\n\n\nupdate-snap\n downloads binary from latest os specific CircleCI binary artifact.\n\n\n\n\nRemoved\n\n\nChanged\n\n\n\n\nTool specific library renamed from cloudbreak.bash to deployer.bash\n\n\n\n\n[v0.0.6] - 2015-03-25\n\n\n[v0.0.3] - 2015-03-19\n\n\nFixed\n\n\n\n\nmake release\n creates binary with X.X.X version when on release branch otherwise X.X.X-gitrev\n\n\n\n\nAdded\n\n\n\n\nDocs: release process described\n\n\n\n\nRemoved\n\n\nChanged\n\n\n[v0.0.2] - 2015-03-19\n\n\nAdded\n\n\nAdded\n- selfupdate command\n- gray debug to stderr\n\n\n[v0.0.1] - 2015-03-18\n\n\nAdded\n\n\n\n\nhelp command added\n\n\nversion command added\n\n\nAdded --version\n\n\nCircleCI build\n\n\nLinux/Darwin binary releases on github", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#unreleased", 
            "text": "Fixed   consul recursor now exculdes both docker ip and bridge ip to avoid recursive dns recursor chain  docs fixed about getting default credentials (cbd login)   Added   Command  cbd azure configure-arm  will create your arm application which can used by cloudbreak  Command  cbd azure deploy-dash  will deploy a dash application in your Azure account  Command  cbd start  will execute the migration by default. If SKIP_DB_MIGRATION_ON_START envvar set to true in Profile, the migration will be skipped  Using Dns SRV record in our services instead of ambassador  Using docker linking system in third party services instead of ambassador  Integration tests are added, where cbd binary is called, not only sourced functions  Docker based CentOS integration test make target added  Uaa db migration   Removed   Full removal of ambassador   Changed   cbd start  doesn\u2019t start if compose yaml regeneration is needed  cbd generate  is less verbose, diff doesnt shown  cbd doctor  shows diff if generate would change  cbd regenerate  creates backup files if changes detected  sequenceiq/uaadb:1.0.1 is used instead of postgres:9.4.1", 
            "title": "Unreleased"
        }, 
        {
            "location": "/changelog/#v103-2015-09-03", 
            "text": "Fixed   Authentication error with  cloudbreak-shell  and  cloudbreak-shell-quiet  is fixed  Command  cbd update  branch  checks for artifact   Added   binary version of gnu-sed 4.2.2 is now included, to solve lot of osx/busybox issues  consul recursor test are added   Removed  Changed    sequenceiq/cloudbreak image updated to 1.0.3    debug() function made multiline capable. Use \\n in messages   refactor bridge ip discovery to run helper docker command only once  consul recursor handling refactored to be more robust", 
            "title": "[v1.0.3] - 2015-09-03"
        }, 
        {
            "location": "/changelog/#v102-2015-08-25", 
            "text": "Fixed  Added   DOCKER_CONSUL_OPTIONS  config option to provide arbitrary consul option   Removed  Changed   Fixed docker version checker to be 1.8.1 compatible. (docker added --format option)  sequenceiq/cloudbreak image updated to 1.0.2  consul image changed from sequenceiq/consul to gliderlabs/consul  consul image updated to 0.5.2 (from 0.5.0)  consul discovers host dns settings, and uses the configured nameserver as recursor", 
            "title": "[v1.0.2] - 2015-08-25"
        }, 
        {
            "location": "/changelog/#v100-2015-08-15", 
            "text": "Fixed  Added  Removed  Changed", 
            "title": "[v1.0.0] - 2015-08-15"
        }, 
        {
            "location": "/changelog/#v100-2015-07-23", 
            "text": "Fixed   GA Release   Added  Removed  Changed", 
            "title": "[v1.0.0] - 2015-07-23"
        }, 
        {
            "location": "/changelog/#v058-2015-07-23", 
            "text": "Fixed   Fix CircleCI release. CircleCI doesn\u2019t allow --rm on docker run   Added  Removed  Changed", 
            "title": "[v0.5.8] - 2015-07-23"
        }, 
        {
            "location": "/changelog/#v057-2015-07-23", 
            "text": "Fixed   Fix make release dependency  Fix CHANGELOG generation at  make release-next-ver  avoid inserting extra -e   Added  Removed  Changed", 
            "title": "[v0.5.7] - 2015-07-23"
        }, 
        {
            "location": "/changelog/#v056-2015-07-23", 
            "text": "Fixed  Added   Release artifacts are published at public-repo-1.hortonworks.com/HDP/cloudbreak/   Removed  Changed", 
            "title": "[v0.5.6] - 2015-07-23"
        }, 
        {
            "location": "/changelog/#v055-2015-07-10", 
            "text": "Fixed  Added   Command  pull-parallel  added for quicker/simultaneous image pull  Release process includes upload to public-repo s3 bucket   Removed  Changed   License changed from MIT to Apache v2  release artifact includes additional files: license/readme/notes", 
            "title": "[v0.5.5] - 2015-07-10"
        }, 
        {
            "location": "/changelog/#v054-2015-07-03", 
            "text": "Fixed  Added   New  cbd-cleanup  command for removing old images or exited containers  Baywatch default parameters added:  CB_BAYWATCH_ENABLED  and CB_BAYWATCH_EXTERN_LOCATION  Logs are saved via lospout  TLS client certificate needed by Cloudbreak is generated with  cbd generate  Command  aws delete-role  added  Command  aws generate-role  added  Command  aws show-role  added  Command  cloudbreak-shell  added  Command  cloudbreak-shell-quiet  added  Command  local-dev  added  Command  token  added   Removed  Changed   AWS authentication env varibale is fixed to use the correct AWS_SECRET_ACCESS_KEY (instead the old AWS_SECRET_KEY)  Using sequenceiq/ambassadord:0.5.0 docker image instead of progrium/ambassadord:latest", 
            "title": "[v0.5.4] - 2015-07-03"
        }, 
        {
            "location": "/changelog/#v053-2015-06-03", 
            "text": "Fixed   One-liner installer fixed, to work if previous cbd exists on path.  cbd update  upstream changes on go-bahser broke the selfupdate functionality  In some environment cloudbreak starts really slow. See:  details , see:  commit   Added   New release proposal can be done by  make release-next-ver   Removed  Changed", 
            "title": "[v0.5.3] - 2015-06-03"
        }, 
        {
            "location": "/changelog/#v052-2015-05-21", 
            "text": "Fixed  Added  Removed  Changed   Command  doctor  hints to run boot2docker shellinit if env is unset  Command  init  in case of OSX, DOCKER_XXX envs are initialized in local profile (Profile)  Default docker images are updated to:  sequenceiq/cloudbreak:0.5.93  sequenceiq/cbdb:0.5.92  sequenceiq/uluwatu:0.5.28  sequenceiq/sultans:0.5.3  sequenceiq/periscope:0.5.5", 
            "title": "[v0.5.2] - 2015-05-21"
        }, 
        {
            "location": "/changelog/#v051-2015-05-18", 
            "text": "Fixed   Issue #55: Sed handles more robust the issue with: curl includes an extra CR char in header fields.   Added  Removed   deployer doesn\u2019t specify cloud specific image defaults. If left empty, they fall back\n  to defaults specified in  java code  CB_AZURE_IMAGE_URI  CB_AWS_AMI_MAP  CB_OPENSTACK_IMAGE  CB_GCP_SOURCE_IMAGE_PATH     Changed   Command  logs  got usage example for specifying servies as filter  Default docker images are updated to:  sequenceiq/cloudbreak:0.5.49  sequenceiq/uluwatu:0.5.16  sequenceiq/sutans:0.5.2", 
            "title": "[v0.5.1] - 2015-05-18"
        }, 
        {
            "location": "/changelog/#v050-2015-05-08", 
            "text": "Fixed   Command  pull  generates yaml files in case they are missing #31   Added   Command  login  Shows Uluwatu login url and credentials  Command  regenerate  deletes and generates docker-compose.yml and uaa.yml  Command  delete  added: deletes yamls and dbs  Command  cloudbreak-shell  added, right now it internale use DEBUG=1 fn fn-call  Command  version  does correct  Semantic Versioning  check to advise an upgrade  Command  generate  checks and shows if Profile change would result in yaml change.  Command  start : prints uluwatu url and credential hint  Command  doctor : fixes boot2docker date/time if not the same as on the host  Internal command:  browse  added to be able to automatically open a browser to a specified url.  Mini Getting Started guide added into README  make dev-debug  installs a special cbd on local OSX, which doesn\u2019t includes *.bash scrips, only refers them\n   by path. No need to  make dev  to test small changes in bash scripts.  Load AWS key and AWS id from Profile  Command  init  helps to guess the PUBLIC_IP in public clouds: google, amazon   Removed  Changed   Command  cbd env export  adds export to the begining of each line  cbd logs accepts optional [services] parameter  docker-compose uses  cbreak_  prefix for container naming instead of the directory name  Command  generate  prints out some more usefull info  uaa.yml generation wont overwrite, just instruct to move existing file (like docker-compose.yml generation)  Command  init  hint fixed on linux.  Command  init  advise to run  generate  if it finds a Profile  Command  init  set PRIVATE_IP the same as PUBLIC_IP for boot2docker  Command  migrate  is introduced for db migration see  Migrate the databases  section of README  Command  startdb  starts the cbdb and pcdb database containers only  Databases are not deleted after boot2docker restart  Import ULU_HOST_ADDRESS and ULU_SULTANS_ADDRESS from Profile", 
            "title": "[v0.5.0] - 2015-05-08"
        }, 
        {
            "location": "/changelog/#v010-2015-04-16", 
            "text": "Fixed   Selfupdate updates the actual running binary intead of the fixed /us/local/bin/cbd  SMTP default port is 25, to fix number conversion exception   Added   Command  init  creates Profile  Install cbd to a directory which is available on $PATH  Docker based test for the one-liner install from README.md:  make install-test   Removed   update-snap  command removed, replaced by parametrized  update   Changed   Cloudbreak/Persicope/Uluwatu/Sultans Dcoker images upgraded to 0.4.x  Use the built in 'checksum' function instead of the external 'shasum' to generate secrets  Command  update  by default updates from latest Github release, parameter can point to branch on CircleCI  DOCKER_XXX env varibles are inherited, so they not needed in Profile  generate  and compose specific commands are only available when  Profile  exists  generate  command genertes docker-compose.yml  and  uaa.yml  PRIVATE_IP  env var defaults to bridge IP (only PUBLC_IP is required in Profile)  use  sulans-bin  docker image istead of sultans", 
            "title": "[v0.1.0] - 2015-04-16"
        }, 
        {
            "location": "/changelog/#v009-2015-04-14", 
            "text": "Fixed   Bash 4.3 is included in the binary, extracted into .deps/bin upon start   Added  Removed  Changed", 
            "title": "[v0.0.9] - 2015-04-14"
        }, 
        {
            "location": "/changelog/#v008-2015-04-13", 
            "text": "Fixed   Fixing deps module, golang fn: checksum added  CircleCI mdule defines required jq  Fixing PATH issue for binary deps   Added   uaadb start added  identity server start added  make dev  added to mac based development  pull  command added  logs  command added   Removed  Changed   Docker containers are managed by  docker-compose", 
            "title": "[v0.0.8] - 2015-04-13"
        }, 
        {
            "location": "/changelog/#v007-2015-03-26", 
            "text": "Fixed  Added   make tests  runs unit tests  docker unit tests are added  start command added: WIP consul, registrator starts  kill command addd: stops and removes cloudbreak specific containers  SKIP_XXX skips the container start   Removed  Changed   env command namespace is always exported, not only in DEBUG mode  env export: machine friendly config list  env show: human readable config list  circle runs unit tests  snapshot binaries include branch name in version string", 
            "title": "[v0.0.7] - 2015-03-26"
        }, 
        {
            "location": "/changelog/#v006-2015-03-25", 
            "text": "Fixed   removed dos2unix dependency for the update command   Added   doctor command added  docker-check-version command added  cci-latest accepts branch as parameter, needed for PR testing  export fn command in DEBUG mode  export env command in DEBUG mode  doctor: add instruction about setting DOCKER_XXX env vars in Profile  info() function added to print green text to STDOUT   Removed  Changed   HOME env var is also inherited (boot2docker version failed)  release process fully automatized", 
            "title": "[v0.0.6] - 2015-03-25"
        }, 
        {
            "location": "/changelog/#v005-2015-03-23", 
            "text": "update  command works without dos2unix", 
            "title": "[v0.0.5] - 2015-03-23"
        }, 
        {
            "location": "/changelog/#v004-2015-03-23", 
            "text": "Fixed   debug function fixed  DEBUG, TRACE and CBD_DEFAULT_PROFILE env vars are inherited   Added   Profile handling added with docs  One-liner install added  Docs: install and update process described  Docs: release process described with sample git commands  Print version number in debug mode  update-snap  downloads binary from latest os specific CircleCI binary artifact.   Removed  Changed   Tool specific library renamed from cloudbreak.bash to deployer.bash", 
            "title": "[v0.0.4] - 2015-03-23"
        }, 
        {
            "location": "/changelog/#v006-2015-03-25_1", 
            "text": "", 
            "title": "[v0.0.6] - 2015-03-25"
        }, 
        {
            "location": "/changelog/#v003-2015-03-19", 
            "text": "Fixed   make release  creates binary with X.X.X version when on release branch otherwise X.X.X-gitrev   Added   Docs: release process described   Removed  Changed", 
            "title": "[v0.0.3] - 2015-03-19"
        }, 
        {
            "location": "/changelog/#v002-2015-03-19", 
            "text": "Added  Added\n- selfupdate command\n- gray debug to stderr", 
            "title": "[v0.0.2] - 2015-03-19"
        }, 
        {
            "location": "/changelog/#v001-2015-03-18", 
            "text": "", 
            "title": "[v0.0.1] - 2015-03-18"
        }, 
        {
            "location": "/changelog/#added_22", 
            "text": "help command added  version command added  Added --version  CircleCI build  Linux/Darwin binary releases on github", 
            "title": "Added"
        }, 
        {
            "location": "/aws/", 
            "text": "Launch/configure your instance\n\n\nWe have pre-built a custom AWS AMI image with all the required tooling and Cloudbreak deployer installed. In order to launch this image on AWS please use the following [Cloudformation] link().\n\n\nCloudbreak will already be installed, thus you can follow these steps to launch the application.\n\n\nConfigure Cloudbreak deployer\n\n\nEnter into the \ncloudbreak-deployment folder\n.\n\n\ncd ~/cloudbreak-deployment\n\n\n\n\nIn this folder you will find a \nProfile\n file.\n\n\nConfigure Cloudbreak UI access\n\n\nPlease edit the Profile file - the only mandatory configuration is the \nPUBLIC_IP\n. This IP will be used to access the Cloudbreak UI\n(called Uluwatu). In some cases the \ncbd\n tool tries to guess it, if can't than will give a hint.\n\n\nAWS access setup\n\n\nIn order for Cloudbreak to be able to launch clusters on AWS on your behalf you need to set up your AWS keys in the Profile file:\n\n\nexport AWS_ACCESS_KEY_ID=AKIA**************W7SA\nexport AWS_SECRET_ACCESS_KEY=RWCT4Cs8******************/*skiOkWD\n\n\n\n\nSMTP configurations\n\n\nDuring registration or cluster provisioning Cloudbreak sends emails to the user. In order for email sending to work put these lines into your \nProfile\n file.\n\n\nexport CLOUDBREAK_SMTP_SENDER_USERNAME=\nexport CLOUDBREAK_SMTP_SENDER_PASSWORD=\nexport CLOUDBREAK_SMTP_SENDER_HOST=\nexport CLOUDBREAK_SMTP_SENDER_PORT=\nexport CLOUDBREAK_SMTP_SENDER_FROM=\n\n\n\n\nGenerate an AWS role\n\n\nOne key point is that Cloudbreak \ndoes not\n store your Cloud provider account details (such as username, password, keys, private SSL certificates, etc). We work around the concept that Identity and Access Management is fully controlled by the end user. Cloudbreak is purely acting on behalf of the end user - without having access to the user's account. In order to launch clusters on your behalf we need an AWS IAM role - that can be used in the Cloudbreak application as a credential.\n\n\ncbd aws generate-role  - Generates an AWS IAM role for Cloudbreak provisioning on AWS\ncbd aws show-role      - Show assumers and policies for an AWS role\ncbd aws delete-role    - Deletes an AWS IAM role, removes all inline policies\n\n\n\n\nYou can check the generated role on your AWS console, under IAM roles.\n\n\nChange default username/Password\n\n\nThe default credentials can be revealed by \ncbd login\n These values are used in the \nuaa.yml\n file's end section. To change these values, add 2 lines into your Profile:\n\n\nexport UAA_DEFAULT_USER_EMAIL=myself@example.com\nexport UAA_DEFAULT_USER_PW=demo123\n\n\n\n\nRegenerate your Profile\n\n\nYou are done with the configuration of Cloudbreak deployer. The last thing you have to do is to regenerate the configurations in order to take effect.\n\n\nrm *.yml\ncbd generate\n\n\n\n\nVerify configs\n\n\nIn order to verify that all configs are OK use the \ndoctor\n command.\n\n\ncbd doctor\n\n\n\n\nUse Cloudbreak\n\n\nTo start the Cloudbreak application use the following command.\n\n\ncbd start\n\n\n\n\nThis will start all the Docker containers and initialize the application. Please give a few minutes until all services starts. While the services are starting you can check the logs.\n\n\ncbd logs\n\n\n\n\nOnce Cloudbreak is up and running you can launch clusters in two different ways. You can use the \nCloudbreak UI\n or use the \nCloudbreak shell\n.", 
            "title": "Deployment"
        }, 
        {
            "location": "/aws/#launchconfigure-your-instance", 
            "text": "We have pre-built a custom AWS AMI image with all the required tooling and Cloudbreak deployer installed. In order to launch this image on AWS please use the following [Cloudformation] link().  Cloudbreak will already be installed, thus you can follow these steps to launch the application.", 
            "title": "Launch/configure your instance"
        }, 
        {
            "location": "/aws/#configure-cloudbreak-deployer", 
            "text": "Enter into the  cloudbreak-deployment folder .  cd ~/cloudbreak-deployment  In this folder you will find a  Profile  file.  Configure Cloudbreak UI access  Please edit the Profile file - the only mandatory configuration is the  PUBLIC_IP . This IP will be used to access the Cloudbreak UI\n(called Uluwatu). In some cases the  cbd  tool tries to guess it, if can't than will give a hint.  AWS access setup  In order for Cloudbreak to be able to launch clusters on AWS on your behalf you need to set up your AWS keys in the Profile file:  export AWS_ACCESS_KEY_ID=AKIA**************W7SA\nexport AWS_SECRET_ACCESS_KEY=RWCT4Cs8******************/*skiOkWD  SMTP configurations  During registration or cluster provisioning Cloudbreak sends emails to the user. In order for email sending to work put these lines into your  Profile  file.  export CLOUDBREAK_SMTP_SENDER_USERNAME=\nexport CLOUDBREAK_SMTP_SENDER_PASSWORD=\nexport CLOUDBREAK_SMTP_SENDER_HOST=\nexport CLOUDBREAK_SMTP_SENDER_PORT=\nexport CLOUDBREAK_SMTP_SENDER_FROM=  Generate an AWS role  One key point is that Cloudbreak  does not  store your Cloud provider account details (such as username, password, keys, private SSL certificates, etc). We work around the concept that Identity and Access Management is fully controlled by the end user. Cloudbreak is purely acting on behalf of the end user - without having access to the user's account. In order to launch clusters on your behalf we need an AWS IAM role - that can be used in the Cloudbreak application as a credential.  cbd aws generate-role  - Generates an AWS IAM role for Cloudbreak provisioning on AWS\ncbd aws show-role      - Show assumers and policies for an AWS role\ncbd aws delete-role    - Deletes an AWS IAM role, removes all inline policies  You can check the generated role on your AWS console, under IAM roles.  Change default username/Password  The default credentials can be revealed by  cbd login  These values are used in the  uaa.yml  file's end section. To change these values, add 2 lines into your Profile:  export UAA_DEFAULT_USER_EMAIL=myself@example.com\nexport UAA_DEFAULT_USER_PW=demo123  Regenerate your Profile  You are done with the configuration of Cloudbreak deployer. The last thing you have to do is to regenerate the configurations in order to take effect.  rm *.yml\ncbd generate  Verify configs  In order to verify that all configs are OK use the  doctor  command.  cbd doctor", 
            "title": "Configure Cloudbreak deployer"
        }, 
        {
            "location": "/aws/#use-cloudbreak", 
            "text": "To start the Cloudbreak application use the following command.  cbd start  This will start all the Docker containers and initialize the application. Please give a few minutes until all services starts. While the services are starting you can check the logs.  cbd logs  Once Cloudbreak is up and running you can launch clusters in two different ways. You can use the  Cloudbreak UI  or use the  Cloudbreak shell .", 
            "title": "Use Cloudbreak"
        }, 
        {
            "location": "/aws_cb_ui/", 
            "text": "You can now log into the Cloudbreak application at http://PUBLIC_IP:3000.\n\n\nManage cloud credentials\n\n\nUsing manage credentials will  link your cloud account with the Cloudbreak account.\n\n\nName:\n name of your credential\n\n\nDescription:\n short description of your linked credential\n\n\nRole ARN:\n the role string - you can find it at the summary tab of the IAM role, default is \ncbreak -deployer\n\n\nSSH public key:\n an SSH public key in OpenSSH format that's private keypair can be used to log into the launched instances later\n\n\nPublic in account:\n share it with others in the account\n\n\nThe ssh username is \nec2-user\n\n\nManage resources\n\n\nUsing manage resources you can create infrastructure templates. Templates describes the infrastructure where the HDP cluster will be provisioned. We support heterogenous clusters - this means that one cluster can be built by combining different templates.\n\n\nName:\n name of your template\n\n\nDescription:\n short description of your template\n\n\nInstance type:\n the Amazon instance type to be used - we suggest to use at least small or medium instances\n\n\nVolume type:\n option to choose are SSD, regular HDD (both EBS) or Ephemeral\n\n\nAttached volumes per instance:\n the number of disks to be attached\n\n\nVolume size (GB):\n the size of the attached disks (in GB)\n\n\nSpot price:\n option to set a spot price - not mandatory, if specified we will request spot price instances (which might take a while or never be fulfilled by Amazon)\n\n\nEBS encryption:\n this feature is supported with all EBS volume types (General Purpose (SSD), Provisioned IOPS (SSD), and Magnetic\n\n\nPublic in account:\n share it with others in the account\n\n\nManage blueprints\n\n\nBlueprints are your declarative definition of a Hadoop cluster.\n\n\nName:\n name of your blueprint\n\n\nDescription:\n short description of your blueprint\n\n\nSource URL:\n you can add a blueprint by pointing to a URL. As an example you can use this \nblueprint\n.\n\n\nManual copy:\n you can copy paste your blueprint in this text area\n\n\nPublic in account:\n share it with others in the account\n\n\nManage networks\n\n\nManage networks allows you to create or reuse existing networks and configure them.\n\n\nName:\n name of the network\n\n\nDescription:\n short description of your network\n\n\nSubnet (CIDR):\n a subnet in the VPC with CIDR block\n\n\nPublic in account:\n share it with others in the account\n\n\nManage security groups\n\n\nSecurity groups allows configuration of traffic/access to the cluster. Currently there are two default groups, and later versions will allow setup of new groups.\n\n\nonly-ssh-and-ssl:\n all ports are locked down (you can't access Hadoop services outside of the VPN) but SSH (22) and HTTPS (443)\n\n\nall-services-port:\n all Hadoop services + SSH/HTTP are accessible by default: SSH (22) HTTPS (443) 8080 (Ambari) 8500 (Consul) 50070 (NN) 8088 (RM Web) 8030 (RM Scheduler) 8050 (RM IPC) 19888 (Job history server) 60010 (HBase master) 15000 (Falcon) 8744 (Storm) 11000 (Oozie) 18080 (Spark HS) 8042 (NM Web) 9996 (Zeppelin WebSocket) 9995 (Zeppelin UI) 3080 (Kibana) 9200 (Elasticsearch)\n\n\nCreate a cluster\n\n\nUsing the create cluster functionality Cloudbreak will create a cloud Stack and a Hadoop Cluster. In order to create a cluster you will have to select a credential first.\n\n\nCluster name:\n your cluster name\n\n\nRegion:\n the region where the cluster is started\n\n\nNetwork:\n the network template\n\n\n`Security Group:\" the security group\n\n\nBlueprint:\n your Hadoop cluster blueprint. Once the blueprint is selected we parse it and give you the option to select the followings for each \nhostgroup\n.\n\n\nHostgroup configuration\n\n\nGroup size:\n the number of instances to be started\n\n\nTemplate:\n the stack template associated to the hostgroup\n\n\nEnable security:\n Install KDC and Kerberize the cluster\n\n\nPublic in account:\n share it with others in the account\n\n\nAdvanced features\n:\n\n\nConsul server count:\n the number of Consul servers (odd number), by default is 3. It varies with the cluster size.\n\n\nMinimum cluster size:\n the provisioning strategy in case of the cloud provider can't allocate all the requested nodes\n\n\nValidate blueprint:\n feature to validate or not the Ambari blueprint. By default is switched on.\n\n\nDedicated instances:\n AWS allows to use dedicated instances\n\n\nAmbari Repository config:\n you can take the stack RPM's from a custom stack repository\n\n\nOnce you have launched the cluster creation you can track the progress either on Cloudbreak UI or your cloud provider management UI.", 
            "title": "Provisioning - webui"
        }, 
        {
            "location": "/aws_cb_ui/#manage-cloud-credentials", 
            "text": "Using manage credentials will  link your cloud account with the Cloudbreak account.  Name:  name of your credential  Description:  short description of your linked credential  Role ARN:  the role string - you can find it at the summary tab of the IAM role, default is  cbreak -deployer  SSH public key:  an SSH public key in OpenSSH format that's private keypair can be used to log into the launched instances later  Public in account:  share it with others in the account  The ssh username is  ec2-user", 
            "title": "Manage cloud credentials"
        }, 
        {
            "location": "/aws_cb_ui/#manage-resources", 
            "text": "Using manage resources you can create infrastructure templates. Templates describes the infrastructure where the HDP cluster will be provisioned. We support heterogenous clusters - this means that one cluster can be built by combining different templates.  Name:  name of your template  Description:  short description of your template  Instance type:  the Amazon instance type to be used - we suggest to use at least small or medium instances  Volume type:  option to choose are SSD, regular HDD (both EBS) or Ephemeral  Attached volumes per instance:  the number of disks to be attached  Volume size (GB):  the size of the attached disks (in GB)  Spot price:  option to set a spot price - not mandatory, if specified we will request spot price instances (which might take a while or never be fulfilled by Amazon)  EBS encryption:  this feature is supported with all EBS volume types (General Purpose (SSD), Provisioned IOPS (SSD), and Magnetic  Public in account:  share it with others in the account", 
            "title": "Manage resources"
        }, 
        {
            "location": "/aws_cb_ui/#manage-blueprints", 
            "text": "Blueprints are your declarative definition of a Hadoop cluster.  Name:  name of your blueprint  Description:  short description of your blueprint  Source URL:  you can add a blueprint by pointing to a URL. As an example you can use this  blueprint .  Manual copy:  you can copy paste your blueprint in this text area  Public in account:  share it with others in the account", 
            "title": "Manage blueprints"
        }, 
        {
            "location": "/aws_cb_ui/#manage-networks", 
            "text": "Manage networks allows you to create or reuse existing networks and configure them.  Name:  name of the network  Description:  short description of your network  Subnet (CIDR):  a subnet in the VPC with CIDR block  Public in account:  share it with others in the account", 
            "title": "Manage networks"
        }, 
        {
            "location": "/aws_cb_ui/#manage-security-groups", 
            "text": "Security groups allows configuration of traffic/access to the cluster. Currently there are two default groups, and later versions will allow setup of new groups.  only-ssh-and-ssl:  all ports are locked down (you can't access Hadoop services outside of the VPN) but SSH (22) and HTTPS (443)  all-services-port:  all Hadoop services + SSH/HTTP are accessible by default: SSH (22) HTTPS (443) 8080 (Ambari) 8500 (Consul) 50070 (NN) 8088 (RM Web) 8030 (RM Scheduler) 8050 (RM IPC) 19888 (Job history server) 60010 (HBase master) 15000 (Falcon) 8744 (Storm) 11000 (Oozie) 18080 (Spark HS) 8042 (NM Web) 9996 (Zeppelin WebSocket) 9995 (Zeppelin UI) 3080 (Kibana) 9200 (Elasticsearch)", 
            "title": "Manage security groups"
        }, 
        {
            "location": "/aws_cb_ui/#create-a-cluster", 
            "text": "Using the create cluster functionality Cloudbreak will create a cloud Stack and a Hadoop Cluster. In order to create a cluster you will have to select a credential first.  Cluster name:  your cluster name  Region:  the region where the cluster is started  Network:  the network template  `Security Group:\" the security group  Blueprint:  your Hadoop cluster blueprint. Once the blueprint is selected we parse it and give you the option to select the followings for each  hostgroup .  Hostgroup configuration  Group size:  the number of instances to be started  Template:  the stack template associated to the hostgroup  Enable security:  Install KDC and Kerberize the cluster  Public in account:  share it with others in the account  Advanced features :  Consul server count:  the number of Consul servers (odd number), by default is 3. It varies with the cluster size.  Minimum cluster size:  the provisioning strategy in case of the cloud provider can't allocate all the requested nodes  Validate blueprint:  feature to validate or not the Ambari blueprint. By default is switched on.  Dedicated instances:  AWS allows to use dedicated instances  Ambari Repository config:  you can take the stack RPM's from a custom stack repository  Once you have launched the cluster creation you can track the progress either on Cloudbreak UI or your cloud provider management UI.", 
            "title": "Create a cluster"
        }, 
        {
            "location": "/aws_cb_shell/", 
            "text": "Interactive mode\n\n\nStart the shell with \ncbd util cloudbreak-shell\n. This will launch the Cloudbr shell inside a Docker container and you are ready to start using it.\n\n\nCreate a cloud credential\n\n\nIn order to start using Cloudbreak you will need to have an AWS cloud use configured. Note that Cloudbreak \ndoes not\n store you cloud user details - we work around the concept of \nIAM\n - on Amazon (or other cloud providers) you will have to create an IAM role, a policy and associate that with your Cloudbreak account.\n\n\ncredential createEC2 --description \u201cdescription\n --name \u201cmyCredentialName\n --roleArn \narn:aws:iam::NUMBER:role/cloudbreak-ABC\n --sshKeyUrl \u201cURL towards your AWS public key\n\n\n\n\n\nAlternatively you can upload your public key from a file as well, by using the \n\u2014sshKeyPath\n switch. You can check whether the credential was creates successfully by using the \ncredential list\n command. You can switch between your cloud credential - when you\u2019d like to use one and act with that you will have to use:\n\n\ncredential select --id #ID of the credential\n\n\n\n\nCreate a template\n\n\nA template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. A template can be used repeatedly to create identical copies of the same stack (or to use as a foundation to start a new stack).\n\n\ntemplate createEC2 --name awstemplate --description aws-template  --region EU_WEST_1 --instanceType M3Xlarge --volumeSize 100 --volumeCount 2\n\n\n\n\nYou can check whether the template was created successfully by using the \ntemplate list\n command. Check the template and select it if you are happy with it:\n\n\ntemplate show --id #ID of the template\n\ntemplate select --id #ID of the template\n\n\n\n\nCreate a stack\n\n\nStacks are template \ninstances\n - a running cloud infrastructure created based on a template. Use the following command to create a stack to be used with your Hadoop cluster:\n\n\nstack create --name \u201cmyStackName\n --nodeCount 10\n\n\n\n\nSelect a blueprint\n\n\nWe ship default Hadoop cluster blueprints with Cloudbreak. You can use these blueprints or add yours. To see the available blueprints and use one of them please use:\n\n\nblueprint list\n\nblueprint select --id #ID of the blueprint\n\n\n\n\nCreate a Hadoop cluster\n\n\nYou are almost done - one more command and this will create your Hadoop cluster on your favorite cloud provider. Same as the API, or UI this will use your \ntemplate\n, and by using CloudFormation will launch a cloud \nstack\n - once the \nstack\n is up and running (cloud provisioning is done) it will use your selected \nblueprint\n and install your custom Hadoop cluster with the selected components and services.\n\n\ncluster create --description \u201cmy cluster desc\n\n\n\n\n\nYou are done - you can check the progress through the Ambari UI. If you log back to Cloudbreak UI you can check the progress over there as well, and learn the IP address of Ambari.\n\n\nSilent mode\n\n\nWith Cloudbreak shell you can recreate clusters based on earlier deployments. Each time you start the shell the executed commands are logged in a file line by line and later either with the \nscript\n command or specifying an \n\u2014cmdfile\n option the same commands can be executed again.\n\n\nWith c\nbd util cloudbreak-shell-quiet\n you can specify a shell file and let the shell apply the configs step by step in a silent mode.", 
            "title": "Provisioning - cli"
        }, 
        {
            "location": "/aws_cb_shell/#interactive-mode", 
            "text": "Start the shell with  cbd util cloudbreak-shell . This will launch the Cloudbr shell inside a Docker container and you are ready to start using it.  Create a cloud credential  In order to start using Cloudbreak you will need to have an AWS cloud use configured. Note that Cloudbreak  does not  store you cloud user details - we work around the concept of  IAM  - on Amazon (or other cloud providers) you will have to create an IAM role, a policy and associate that with your Cloudbreak account.  credential createEC2 --description \u201cdescription  --name \u201cmyCredentialName  --roleArn  arn:aws:iam::NUMBER:role/cloudbreak-ABC  --sshKeyUrl \u201cURL towards your AWS public key   Alternatively you can upload your public key from a file as well, by using the  \u2014sshKeyPath  switch. You can check whether the credential was creates successfully by using the  credential list  command. You can switch between your cloud credential - when you\u2019d like to use one and act with that you will have to use:  credential select --id #ID of the credential  Create a template  A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. A template can be used repeatedly to create identical copies of the same stack (or to use as a foundation to start a new stack).  template createEC2 --name awstemplate --description aws-template  --region EU_WEST_1 --instanceType M3Xlarge --volumeSize 100 --volumeCount 2  You can check whether the template was created successfully by using the  template list  command. Check the template and select it if you are happy with it:  template show --id #ID of the template\n\ntemplate select --id #ID of the template  Create a stack  Stacks are template  instances  - a running cloud infrastructure created based on a template. Use the following command to create a stack to be used with your Hadoop cluster:  stack create --name \u201cmyStackName  --nodeCount 10  Select a blueprint  We ship default Hadoop cluster blueprints with Cloudbreak. You can use these blueprints or add yours. To see the available blueprints and use one of them please use:  blueprint list\n\nblueprint select --id #ID of the blueprint  Create a Hadoop cluster  You are almost done - one more command and this will create your Hadoop cluster on your favorite cloud provider. Same as the API, or UI this will use your  template , and by using CloudFormation will launch a cloud  stack  - once the  stack  is up and running (cloud provisioning is done) it will use your selected  blueprint  and install your custom Hadoop cluster with the selected components and services.  cluster create --description \u201cmy cluster desc   You are done - you can check the progress through the Ambari UI. If you log back to Cloudbreak UI you can check the progress over there as well, and learn the IP address of Ambari.", 
            "title": "Interactive mode"
        }, 
        {
            "location": "/aws_cb_shell/#silent-mode", 
            "text": "With Cloudbreak shell you can recreate clusters based on earlier deployments. Each time you start the shell the executed commands are logged in a file line by line and later either with the  script  command or specifying an  \u2014cmdfile  option the same commands can be executed again.  With c bd util cloudbreak-shell-quiet  you can specify a shell file and let the shell apply the configs step by step in a silent mode.", 
            "title": "Silent mode"
        }, 
        {
            "location": "/azure/", 
            "text": "Launch/configure your instance\n\n\nWe have pre-built a custom Azure image available on VM Depot with all the required tooling and Cloudbreak deployer installed. In order to launch this image on Azure please use the following \nimage\n.\n\n\nNote that we use the new \nAzure ARM\n in order to launch clusters. In order to work we need to create an Active Directory application with the configured name and password and adds the permissions that are needed to call the Azure Resource Manager API. Cloudbreak deployer automates all this for you.\n\n\nCloudbreak will already be installed, thus you can follow these steps to launch the application.\n\n\nConfigure Cloudbreak deployer\n\n\nEnter into the \ncloudbreak-deployment folder\n.\n\n\ncd ~/cloudbreak-deployment\n\n\n\n\nIn this folder you will find a \nProfile\n file.\n\n\nConfigure Cloudbreak UI access\n\n\nPlease edit the Profile file - the only mandatory configuration is the \nPUBLIC_IP\n. This IP will be used to access the Cloudbreak UI\n(called Uluwatu). In some cases the \ncbd\n tool tries to guess it, if can't than will give a hint.\n\n\nAzure access setup\n\n\nIn order for Cloudbreak to be able to launch clusters on Azure on your behalf you need to set up your Azure ARM application.\n\n\ncbd azure configure-arm --app_name myapp --app_password password123 --subscription_id 1234-abcd-efgh-1234 --username example@company.onmicrosoft.com --password password123\n\n\n\n\nWhere \n--app_password\n is your application password (default is password), \n--subscription_id\n is your Azure subscription ID, \n--username\n is your Azure username and  \n--password\n is your Azure password.\n\n\nFilesystem configuration\n\n\nWhen starting a cluster with Cloudbreak on Azure, the default filesystem is \u201cWindows Azure blob storage with DASH\u201d. Hadoop has built-in support for the \nWASB filesystem\n so it can be used easily as HDFS instead of disks.\n\n\nDisks and blob storage\n\n\nIn Azure every data disk attached to a virtual machine \nis stored\n as a virtual hard disk (VHD) in a page blob inside an Azure storage account. Because these are not local disks and the operations must be done on the VHD files it causes degraded performance when used as HDFS.\nWhen WASB is used as a Hadoop filesystem the files are full-value blobs in a storage account. It means better performance compared to the data disks and the WASB filesystem can be configured very easily but Azure storage accounts have their own \nlimitations\n as well. There is a space limitation for TB per storage account (500 TB) as well but the real bottleneck is the total request rate that is only 20000 IOPS where Azure will start to throw errors when trying to do an I/O operation.\nTo bypass those limits Microsoft created a small service called \nDASH\n. DASH itself is a service that imitates the API of the Azure Blob Storage API and it can be deployed as a Microsoft Azure Cloud Service. Because its API is the same as the standard blob storage API it can be used \nalmost\n in the same way as the default WASB filesystem from a Hadoop deployment.\nDASH works by sharding the storage access across multiple storage accounts. It can be configured to distribute storage account load to at most 15 \nscaleout\n storage accounts. It needs one more \nnamespace\n storage account where it keeps track of where the data is stored.\nWhen configuring a WASB filesystem with Hadoop, the only required config entries are the ones where the access details are described. To access a storage account Azure generates an access key that is displayed on the Azure portal or can be queried through the API while the account name is the name of the storage account itself. A DASH service has a similar account name and key, those can be configured in the configuration file while deploying the cloud service.\n\n\n\n\nDeploying a DASH service with Cloudbreak deployer\n\n\nWe have automated the deployment of a DASH service in cloudbreak-deployer. After cbd is installed, simply run the following command to deploy a DASH cloud service with 5 scale out storage accounts:\n\n\ncbd azure deploy-dash --accounts 5 --prefix dash --location \nWest Europe\n --instances 3\n\n\n\n\nThe command first creates the namespace account and the scaleout storage accounts, builds the \n.cscfg\n configuration file based on the created storage account names and keys, generates an Account Name and an Account Key for the DASH service and finally deploys the cloud service package file to a new cloud service.\n\n\nThe WASB filesystem configured with DASH can be used as a data lake - when multiple clusters are deployed with the same DASH filesystem configuration the same data can be accessed from all the clusters, but every cluster can have a different service configured as well. In that case deploy as many DASH services with cbd as clusters with Cloudbreak and configure them accordingly.\n\n\nSMTP configurations\n\n\nDuring registration or cluster provisioning Cloudbreak sends emails to the user. In order for email sending to work put these lines into your \nProfile\n file.\n\n\nexport CLOUDBREAK_SMTP_SENDER_USERNAME=\nexport CLOUDBREAK_SMTP_SENDER_PASSWORD=\nexport CLOUDBREAK_SMTP_SENDER_HOST=\nexport CLOUDBREAK_SMTP_SENDER_PORT=\nexport CLOUDBREAK_SMTP_SENDER_FROM=\n\n\n\n\nChange default username/Password\n\n\nThe default credentials can be revealed by \ncbd login\n These values are used in the \nuaa.yml\n file's end section. To change these values, add 2 lines into your Profile:\n\n\nexport UAA_DEFAULT_USER_EMAIL=myself@example.com\nexport UAA_DEFAULT_USER_PW=demo123\n\n\n\n\nRegenerate your Profile\n\n\nYou are done with the configuration of Cloudbreak deployer. The last thing you have to do is to regenerate the configurations in order to take effect.\n\n\nrm *.yml\ncbd generate\n\n\n\n\nVerify configs\n\n\nIn order to verify that all configs are OK use the \ndoctor\n command.\n\n\ncbd doctor\n\n\n\n\nUse Cloudbreak\n\n\nTo start the Cloudbreak application use the following command.\n\n\ncbd start\n\n\n\n\nThis will start all the Docker containers and initialize the application. Please give a few minutes until all services starts. While the services are starting you can check the logs.\n\n\ncbd logs\n\n\n\n\nOnce Cloudbreak is up and running you can launch clusters in two different ways. You can use the \nCloudbreak UI\n or use the \nCloudbreak shell\n.", 
            "title": "Deployment"
        }, 
        {
            "location": "/azure/#launchconfigure-your-instance", 
            "text": "We have pre-built a custom Azure image available on VM Depot with all the required tooling and Cloudbreak deployer installed. In order to launch this image on Azure please use the following  image .  Note that we use the new  Azure ARM  in order to launch clusters. In order to work we need to create an Active Directory application with the configured name and password and adds the permissions that are needed to call the Azure Resource Manager API. Cloudbreak deployer automates all this for you.  Cloudbreak will already be installed, thus you can follow these steps to launch the application.", 
            "title": "Launch/configure your instance"
        }, 
        {
            "location": "/azure/#configure-cloudbreak-deployer", 
            "text": "Enter into the  cloudbreak-deployment folder .  cd ~/cloudbreak-deployment  In this folder you will find a  Profile  file.  Configure Cloudbreak UI access  Please edit the Profile file - the only mandatory configuration is the  PUBLIC_IP . This IP will be used to access the Cloudbreak UI\n(called Uluwatu). In some cases the  cbd  tool tries to guess it, if can't than will give a hint.  Azure access setup  In order for Cloudbreak to be able to launch clusters on Azure on your behalf you need to set up your Azure ARM application.  cbd azure configure-arm --app_name myapp --app_password password123 --subscription_id 1234-abcd-efgh-1234 --username example@company.onmicrosoft.com --password password123  Where  --app_password  is your application password (default is password),  --subscription_id  is your Azure subscription ID,  --username  is your Azure username and   --password  is your Azure password.  Filesystem configuration  When starting a cluster with Cloudbreak on Azure, the default filesystem is \u201cWindows Azure blob storage with DASH\u201d. Hadoop has built-in support for the  WASB filesystem  so it can be used easily as HDFS instead of disks.  Disks and blob storage  In Azure every data disk attached to a virtual machine  is stored  as a virtual hard disk (VHD) in a page blob inside an Azure storage account. Because these are not local disks and the operations must be done on the VHD files it causes degraded performance when used as HDFS.\nWhen WASB is used as a Hadoop filesystem the files are full-value blobs in a storage account. It means better performance compared to the data disks and the WASB filesystem can be configured very easily but Azure storage accounts have their own  limitations  as well. There is a space limitation for TB per storage account (500 TB) as well but the real bottleneck is the total request rate that is only 20000 IOPS where Azure will start to throw errors when trying to do an I/O operation.\nTo bypass those limits Microsoft created a small service called  DASH . DASH itself is a service that imitates the API of the Azure Blob Storage API and it can be deployed as a Microsoft Azure Cloud Service. Because its API is the same as the standard blob storage API it can be used  almost  in the same way as the default WASB filesystem from a Hadoop deployment.\nDASH works by sharding the storage access across multiple storage accounts. It can be configured to distribute storage account load to at most 15  scaleout  storage accounts. It needs one more  namespace  storage account where it keeps track of where the data is stored.\nWhen configuring a WASB filesystem with Hadoop, the only required config entries are the ones where the access details are described. To access a storage account Azure generates an access key that is displayed on the Azure portal or can be queried through the API while the account name is the name of the storage account itself. A DASH service has a similar account name and key, those can be configured in the configuration file while deploying the cloud service.   Deploying a DASH service with Cloudbreak deployer  We have automated the deployment of a DASH service in cloudbreak-deployer. After cbd is installed, simply run the following command to deploy a DASH cloud service with 5 scale out storage accounts:  cbd azure deploy-dash --accounts 5 --prefix dash --location  West Europe  --instances 3  The command first creates the namespace account and the scaleout storage accounts, builds the  .cscfg  configuration file based on the created storage account names and keys, generates an Account Name and an Account Key for the DASH service and finally deploys the cloud service package file to a new cloud service.  The WASB filesystem configured with DASH can be used as a data lake - when multiple clusters are deployed with the same DASH filesystem configuration the same data can be accessed from all the clusters, but every cluster can have a different service configured as well. In that case deploy as many DASH services with cbd as clusters with Cloudbreak and configure them accordingly.  SMTP configurations  During registration or cluster provisioning Cloudbreak sends emails to the user. In order for email sending to work put these lines into your  Profile  file.  export CLOUDBREAK_SMTP_SENDER_USERNAME=\nexport CLOUDBREAK_SMTP_SENDER_PASSWORD=\nexport CLOUDBREAK_SMTP_SENDER_HOST=\nexport CLOUDBREAK_SMTP_SENDER_PORT=\nexport CLOUDBREAK_SMTP_SENDER_FROM=  Change default username/Password  The default credentials can be revealed by  cbd login  These values are used in the  uaa.yml  file's end section. To change these values, add 2 lines into your Profile:  export UAA_DEFAULT_USER_EMAIL=myself@example.com\nexport UAA_DEFAULT_USER_PW=demo123  Regenerate your Profile  You are done with the configuration of Cloudbreak deployer. The last thing you have to do is to regenerate the configurations in order to take effect.  rm *.yml\ncbd generate  Verify configs  In order to verify that all configs are OK use the  doctor  command.  cbd doctor", 
            "title": "Configure Cloudbreak deployer"
        }, 
        {
            "location": "/azure/#use-cloudbreak", 
            "text": "To start the Cloudbreak application use the following command.  cbd start  This will start all the Docker containers and initialize the application. Please give a few minutes until all services starts. While the services are starting you can check the logs.  cbd logs  Once Cloudbreak is up and running you can launch clusters in two different ways. You can use the  Cloudbreak UI  or use the  Cloudbreak shell .", 
            "title": "Use Cloudbreak"
        }, 
        {
            "location": "/azure_cb_ui/", 
            "text": "Once Cloudbreak is up and running you can launch clusters in two different ways. You can use the \nCloudbreak UI\n or use the \nCloudbreak shell\n.\n\n\nManage cloud credentials\n\n\nYou can now log into the Cloudbreak application at http://PUBLIC_IP:3000. Once logged in go to \nManage credentials\n. Using manage credentials will  link your cloud account with the Cloudbreak account.\n\n\nName:\n name of your credential\n\n\nDescription:\n short description of your linked credential\n\n\nSubscription Id:\n your Azure subscription id - see Accounts (Browse all\n Subscription)\n\n\nPassword:\n your password which was setted up when you create the AD app\n\n\nApp ID:\n You app Id (Browse all\n Subscription\n Subscription detail\n Users\n You application\n Properties)\n\n\nApp Owner Tenant ID:\n You Tenant Id (Browse all\n Subscription\n Subscription detail\n Users\n You application\n Properties)\n\n\nSSH certificate:\n the SSH public certificate in OpenSSH format that's private keypair can be used to log into the launched instances later (The key generation process is described in the Configuring the Microsoft Azure account section)\n\n\nThe ssh username is \ncloudbreak\n\n\nManage resources\n\n\nUsing manage resources you can create infrastructure templates. Templates describes the infrastructure where the HDP cluster will be provisioned. We support heterogenous clusters - this means that one cluster can be built by combining different templates.\n\n\nName:\n name of your template\n\n\nDescription:\n short description of your template\n\n\nInstance type:\n the Amazon instance type to be used - we suggest to use at least small or medium instances\n\n\nVolume type:\n option to choose are SSD, regular HDD (both EBS) or Ephemeral\n\n\nAttached volumes per instance:\n the number of disks to be attached\n\n\nVolume size (GB):\n the size of the attached disks (in GB)\n\n\nSpot price:\n option to set a spot price - not mandatory, if specified we will request spot price instances (which might take a while or never be fulfilled by Amazon)\n\n\nEBS encryption:\n this feature is supported with all EBS volume types (General Purpose (SSD), Provisioned IOPS (SSD), and Magnetic\n\n\nPublic in account:\n share it with others in the account\n\n\nManage blueprints\n\n\nBlueprints are your declarative definition of a Hadoop cluster.\n\n\nName:\n name of your blueprint\n\n\nDescription:\n short description of your blueprint\n\n\nSource URL:\n you can add a blueprint by pointing to a URL. As an example you can use this \nblueprint\n.\n\n\nManual copy:\n you can copy paste your blueprint in this text area\n\n\nPublic in account:\n share it with others in the account\n\n\nManage networks\n\n\nManage networks allows you to create or reuse existing networks and configure them.\n\n\nName:\n name of the network\n\n\nDescription:\n short description of your network\n\n\nSubnet (CIDR):\n a subnet in the VPC with CIDR block\n\n\nAddress prefix (CIDR):\n the address space that is used for subnets\n\n\nPublic in account:\n share it with others in the account\n\n\nManage security groups\n\n\nSecurity groups allows configuration of traffic/access to the cluster. Currently there are two default groups, and later versions will allow setup of new groups.\n\n\nonly-ssh-and-ssl:\n all ports are locked down (you can't access Hadoop services outside of the VPN) but SSH (22) and HTTPS (443)\n\n\nall-services-port:\n all Hadoop services + SSH/HTTP are accessible by default: SSH (22) HTTPS (443) 8080 (Ambari) 8500 (Consul) 50070 (NN) 8088 (RM Web) 8030 (RM Scheduler) 8050 (RM IPC) 19888 (Job history server) 60010 (HBase master) 15000 (Falcon) 8744 (Storm) 11000 (Oozie) 18080 (Spark HS) 8042 (NM Web) 9996 (Zeppelin WebSocket) 9995 (Zeppelin UI) 3080 (Kibana) 9200 (Elasticsearch)\n\n\nCreate a cluster\n\n\nUsing the create cluster functionality Cloudbreak will create a cloud Stack and a Hadoop Cluster. In order to create a cluster you will have to select a credential first.\n\n\nCluster name:\n your cluster name\n\n\nRegion:\n the region where the cluster is started\n\n\nNetwork:\n the network template\n\n\n`Security Group:\" the security group\n\n\nBlueprint:\n your Hadoop cluster blueprint. Once the blueprint is selected we parse it and give you the option to select the followings for each \nhostgroup\n.\n\n\nHostgroup configuration\n\n\nGroup size:\n the number of instances to be started\n\n\nTemplate:\n the stack template associated to the hostgroup\n\n\nDASH Account Name:\n values printed by Cloudbreak deployer when the DASH service was deployed\n\n\nDASH Account Key:\n values printed by Cloudbreak deployer when the DASH service was deployed\n\n\nImportant:\n For better performance DASH service and the Cloudbreak cluster must be in the same Azure region.\n\n\nEnable security:\n Install KDC and Kerberize the cluster\n\n\nPublic in account:\n share it with others in the account\n\n\nAdvanced features\n:\n\n\nConsul server count:\n the number of Consul servers (odd number), by default is 3. It varies with the cluster size.\n\n\nMinimum cluster size:\n the provisioning strategy in case of the cloud provider can't allocate all the requested nodes\n\n\nValidate blueprint:\n feature to validate or not the Ambari blueprint. By default is switched on.\n\n\nAmbari Repository config:\n you can take the stack RPM's from a custom stack repository\n\n\nOnce you have launched the cluster creation you can track the progress either on Cloudbreak UI or your cloud provider management UI.", 
            "title": "Provisioning - webui"
        }, 
        {
            "location": "/azure_cb_ui/#manage-cloud-credentials", 
            "text": "You can now log into the Cloudbreak application at http://PUBLIC_IP:3000. Once logged in go to  Manage credentials . Using manage credentials will  link your cloud account with the Cloudbreak account.  Name:  name of your credential  Description:  short description of your linked credential  Subscription Id:  your Azure subscription id - see Accounts (Browse all  Subscription)  Password:  your password which was setted up when you create the AD app  App ID:  You app Id (Browse all  Subscription  Subscription detail  Users  You application  Properties)  App Owner Tenant ID:  You Tenant Id (Browse all  Subscription  Subscription detail  Users  You application  Properties)  SSH certificate:  the SSH public certificate in OpenSSH format that's private keypair can be used to log into the launched instances later (The key generation process is described in the Configuring the Microsoft Azure account section)  The ssh username is  cloudbreak", 
            "title": "Manage cloud credentials"
        }, 
        {
            "location": "/azure_cb_ui/#manage-resources", 
            "text": "Using manage resources you can create infrastructure templates. Templates describes the infrastructure where the HDP cluster will be provisioned. We support heterogenous clusters - this means that one cluster can be built by combining different templates.  Name:  name of your template  Description:  short description of your template  Instance type:  the Amazon instance type to be used - we suggest to use at least small or medium instances  Volume type:  option to choose are SSD, regular HDD (both EBS) or Ephemeral  Attached volumes per instance:  the number of disks to be attached  Volume size (GB):  the size of the attached disks (in GB)  Spot price:  option to set a spot price - not mandatory, if specified we will request spot price instances (which might take a while or never be fulfilled by Amazon)  EBS encryption:  this feature is supported with all EBS volume types (General Purpose (SSD), Provisioned IOPS (SSD), and Magnetic  Public in account:  share it with others in the account", 
            "title": "Manage resources"
        }, 
        {
            "location": "/azure_cb_ui/#manage-blueprints", 
            "text": "Blueprints are your declarative definition of a Hadoop cluster.  Name:  name of your blueprint  Description:  short description of your blueprint  Source URL:  you can add a blueprint by pointing to a URL. As an example you can use this  blueprint .  Manual copy:  you can copy paste your blueprint in this text area  Public in account:  share it with others in the account", 
            "title": "Manage blueprints"
        }, 
        {
            "location": "/azure_cb_ui/#manage-networks", 
            "text": "Manage networks allows you to create or reuse existing networks and configure them.  Name:  name of the network  Description:  short description of your network  Subnet (CIDR):  a subnet in the VPC with CIDR block  Address prefix (CIDR):  the address space that is used for subnets  Public in account:  share it with others in the account", 
            "title": "Manage networks"
        }, 
        {
            "location": "/azure_cb_ui/#manage-security-groups", 
            "text": "Security groups allows configuration of traffic/access to the cluster. Currently there are two default groups, and later versions will allow setup of new groups.  only-ssh-and-ssl:  all ports are locked down (you can't access Hadoop services outside of the VPN) but SSH (22) and HTTPS (443)  all-services-port:  all Hadoop services + SSH/HTTP are accessible by default: SSH (22) HTTPS (443) 8080 (Ambari) 8500 (Consul) 50070 (NN) 8088 (RM Web) 8030 (RM Scheduler) 8050 (RM IPC) 19888 (Job history server) 60010 (HBase master) 15000 (Falcon) 8744 (Storm) 11000 (Oozie) 18080 (Spark HS) 8042 (NM Web) 9996 (Zeppelin WebSocket) 9995 (Zeppelin UI) 3080 (Kibana) 9200 (Elasticsearch)", 
            "title": "Manage security groups"
        }, 
        {
            "location": "/azure_cb_ui/#create-a-cluster", 
            "text": "Using the create cluster functionality Cloudbreak will create a cloud Stack and a Hadoop Cluster. In order to create a cluster you will have to select a credential first.  Cluster name:  your cluster name  Region:  the region where the cluster is started  Network:  the network template  `Security Group:\" the security group  Blueprint:  your Hadoop cluster blueprint. Once the blueprint is selected we parse it and give you the option to select the followings for each  hostgroup .  Hostgroup configuration  Group size:  the number of instances to be started  Template:  the stack template associated to the hostgroup  DASH Account Name:  values printed by Cloudbreak deployer when the DASH service was deployed  DASH Account Key:  values printed by Cloudbreak deployer when the DASH service was deployed  Important:  For better performance DASH service and the Cloudbreak cluster must be in the same Azure region.  Enable security:  Install KDC and Kerberize the cluster  Public in account:  share it with others in the account  Advanced features :  Consul server count:  the number of Consul servers (odd number), by default is 3. It varies with the cluster size.  Minimum cluster size:  the provisioning strategy in case of the cloud provider can't allocate all the requested nodes  Validate blueprint:  feature to validate or not the Ambari blueprint. By default is switched on.  Ambari Repository config:  you can take the stack RPM's from a custom stack repository  Once you have launched the cluster creation you can track the progress either on Cloudbreak UI or your cloud provider management UI.", 
            "title": "Create a cluster"
        }, 
        {
            "location": "/azure_cb_shell/", 
            "text": "Interactive mode\n\n\nStart the shell with \ncbd util cloudbreak-shell\n. This will launch the Cloudbr shell inside a Docker container and you are ready to start using it.\n\n\nCreate a cloud credential\n\n\nIn order to start using Cloudbreak you will need to have an AWS cloud use configured. Note that Cloudbreak \ndoes not\n store you cloud user details - we work around the concept of \nIAM\n - on Amazon (or other cloud providers) you will have to create an IAM role, a policy and associate that with your Cloudbreak account.\n\n\ncredential createEC2 --description \u201cdescription\n --name \u201cmyCredentialName\n --roleArn \narn:aws:iam::NUMBER:role/cloudbreak-ABC\n --sshKeyUrl \u201cURL towards your AWS public key\n\n\n\n\n\nAlternatively you can upload your public key from a file as well, by using the \n\u2014sshKeyPath\n switch. You can check whether the credential was creates successfully by using the \ncredential list\n command. You can switch between your cloud credential - when you\u2019d like to use one and act with that you will have to use:\n\n\ncredential select --id #ID of the credential\n\n\n\n\nCreate a template\n\n\nA template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. A template can be used repeatedly to create identical copies of the same stack (or to use as a foundation to start a new stack).\n\n\ntemplate createEC2 --name awstemplate --description aws-template  --region EU_WEST_1 --instanceType M3Xlarge --volumeSize 100 --volumeCount 2\n\n\n\n\nYou can check whether the template was created successfully by using the \ntemplate list\n command. Check the template and select it if you are happy with it:\n\n\ntemplate show --id #ID of the template\n\ntemplate select --id #ID of the template\n\n\n\n\nCreate a stack\n\n\nStacks are template \ninstances\n - a running cloud infrastructure created based on a template. Use the following command to create a stack to be used with your Hadoop cluster:\n\n\nstack create --name \u201cmyStackName\n --nodeCount 10\n\n\n\n\nSelect a blueprint\n\n\nWe ship default Hadoop cluster blueprints with Cloudbreak. You can use these blueprints or add yours. To see the available blueprints and use one of them please use:\n\n\nblueprint list\n\nblueprint select --id #ID of the blueprint\n\n\n\n\nCreate a Hadoop cluster\n\n\nYou are almost done - one more command and this will create your Hadoop cluster on your favorite cloud provider. Same as the API, or UI this will use your \ntemplate\n, and by using CloudFormation will launch a cloud \nstack\n - once the \nstack\n is up and running (cloud provisioning is done) it will use your selected \nblueprint\n and install your custom Hadoop cluster with the selected components and services.\n\n\ncluster create --description \u201cmy cluster desc\n\n\n\n\n\nYou are done - you can check the progress through the Ambari UI. If you log back to Cloudbreak UI you can check the progress over there as well, and learn the IP address of Ambari.\n\n\nSilent mode\n\n\nWith Cloudbreak shell you can recreate clusters based on earlier deployments. Each time you start the shell the executed commands are logged in a file line by line and later either with the \nscript\n command or specifying an \n\u2014cmdfile\n option the same commands can be executed again.\n\n\nWith c\nbd util cloudbreak-shell-quiet\n you can specify a shell file and let the shell apply the configs step by step in a silent mode.", 
            "title": "Provisioning - cli"
        }, 
        {
            "location": "/azure_cb_shell/#interactive-mode", 
            "text": "Start the shell with  cbd util cloudbreak-shell . This will launch the Cloudbr shell inside a Docker container and you are ready to start using it.  Create a cloud credential  In order to start using Cloudbreak you will need to have an AWS cloud use configured. Note that Cloudbreak  does not  store you cloud user details - we work around the concept of  IAM  - on Amazon (or other cloud providers) you will have to create an IAM role, a policy and associate that with your Cloudbreak account.  credential createEC2 --description \u201cdescription  --name \u201cmyCredentialName  --roleArn  arn:aws:iam::NUMBER:role/cloudbreak-ABC  --sshKeyUrl \u201cURL towards your AWS public key   Alternatively you can upload your public key from a file as well, by using the  \u2014sshKeyPath  switch. You can check whether the credential was creates successfully by using the  credential list  command. You can switch between your cloud credential - when you\u2019d like to use one and act with that you will have to use:  credential select --id #ID of the credential  Create a template  A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. A template can be used repeatedly to create identical copies of the same stack (or to use as a foundation to start a new stack).  template createEC2 --name awstemplate --description aws-template  --region EU_WEST_1 --instanceType M3Xlarge --volumeSize 100 --volumeCount 2  You can check whether the template was created successfully by using the  template list  command. Check the template and select it if you are happy with it:  template show --id #ID of the template\n\ntemplate select --id #ID of the template  Create a stack  Stacks are template  instances  - a running cloud infrastructure created based on a template. Use the following command to create a stack to be used with your Hadoop cluster:  stack create --name \u201cmyStackName  --nodeCount 10  Select a blueprint  We ship default Hadoop cluster blueprints with Cloudbreak. You can use these blueprints or add yours. To see the available blueprints and use one of them please use:  blueprint list\n\nblueprint select --id #ID of the blueprint  Create a Hadoop cluster  You are almost done - one more command and this will create your Hadoop cluster on your favorite cloud provider. Same as the API, or UI this will use your  template , and by using CloudFormation will launch a cloud  stack  - once the  stack  is up and running (cloud provisioning is done) it will use your selected  blueprint  and install your custom Hadoop cluster with the selected components and services.  cluster create --description \u201cmy cluster desc   You are done - you can check the progress through the Ambari UI. If you log back to Cloudbreak UI you can check the progress over there as well, and learn the IP address of Ambari.", 
            "title": "Interactive mode"
        }, 
        {
            "location": "/azure_cb_shell/#silent-mode", 
            "text": "With Cloudbreak shell you can recreate clusters based on earlier deployments. Each time you start the shell the executed commands are logged in a file line by line and later either with the  script  command or specifying an  \u2014cmdfile  option the same commands can be executed again.  With c bd util cloudbreak-shell-quiet  you can specify a shell file and let the shell apply the configs step by step in a silent mode.", 
            "title": "Silent mode"
        }, 
        {
            "location": "/gcp/", 
            "text": "GCP based installation\n\n\nWe have pre-built a custom GCP image available on VM Depot with all the required tooling and Cloudbreak deployer installed. In order to launch this image on Azure please use the following \nimage\n.\n\n\nCloudbreak will already be installed, thus you can follow these steps to launch the application.\n\n\nUsage\n\n\nOnce the Cloudbreak deployer is installed it will generate some config files and will download supporting binaries. It is\nadvised that you create a dedicated directory for it:\n\n\nmkdir cloudbreak-deployment\ncd cloudbreak-deployment\n\n\n\n\nInitialize Profile\n\n\nFirst initialize your directory by creating a \nProfile\n file:\n\n\ncbd init\n\n\n\n\nIt will create a \nProfile\n file in the current directory. Please edit the file - the only required\nconfiguration is the \nPUBLIC_IP\n. This IP will be used to access the Cloudbreak UI\n(called Uluwatu). In some cases the \ncbd\n tool tries to guess it, if can't than will give a hint.\n\n\nStart Cloudbreak\n\n\nTo start all the containers run:\n\n\ncbd start\n\n\n\n\nLaunching the first time will take more time as it does some additional steps:\n\n\n\n\ndownload all the docker images, needed by Cloudbreak.\n\n\ncreate \ndocker-compose.yml\n: Full configuration of containers needed for the Cloudbreak deployment.\n\n\ncreate \nuaa.yml\n: Identity Server configuration.\n\n\n\n\nWatch the logs\n\n\ncbd logs\n\n\n\n\nDefault Credentials\n\n\nThe default credentials can be revealed by \ncbd login\n\n\nThese values are used in the \nuaa.yml\n end section. To change these values, add 2 lines into your Profile:\n\n\nexport UAA_DEFAULT_USER_EMAIL=myself@example.com\nexport UAA_DEFAULT_USER_PW=demo123\n\n\n\n\nand than you need to recreate configs:\n\n\nrm *.yml\ncbd generate\n\n\n\n\nProvider specific configurations\n\n\nFollow the \ninstructions\n in Google Cloud's documentation to create a \nService account\n and \nGenerate a new P12 key\n.\n\n\nMake sure that at API level (\nAPIs and auth\n menu) you have enabled:\n\n\n\n\nGoogle Compute Engine\n\n\nGoogle Compute Engine Instance Group Manager API\n\n\nGoogle Compute Engine Instance Groups API\n\n\nBigQuery API\n\n\nGoogle Cloud Deployment Manager API\n\n\nGoogle Cloud DNS API\n\n\nGoogle Cloud SQL\n\n\nGoogle Cloud Storage\n\n\nGoogle Cloud Storage JSON API\n\n\n\n\nWhen creating GCP credentials in Cloudbreak you will have to provide the email address of the Service Account and the project ID (from Google Developers Console - Projects) where the service account is created. You'll also have to upload the generated P12 file and provide an OpenSSH formatted public key that will be used as an SSH key.\n\n\nManage cloud credentials\n\n\nYou can now log into the Cloudbreak application at http://PUBLIC_IP:3000. Once logged in go to \nManage credentials\n. Using manage credentials will  link your cloud account with the Cloudbreak account.\n\n\nName:\n name of your credential\n\n\nDescription:\n short description of your linked credential\n\n\nProject Id:\n your GCP Project id - see Accounts\n\n\nService Account Email Address:\n your GCP service account mail address - see Accounts\n\n\nService Account private (p12) key:\n your GCP service account generated private key - see Accounts\n\n\nSSH public key:\n the SSH public key in OpenSSH format that's private keypair can be used to log into the launched instances later\n\n\nPublic in account:\n share it with others in the account\n\n\nThe ssh username is cloudbreak.\n\n\nManage resources\n\n\nUsing manage resources you can create infrastructure templates. Templates describes the infrastructure where the HDP cluster will be provisioned. We support heterogenous clusters - this means that one cluster can be built by combining different templates.\n\n\nName:\n name of your template\n\n\nDescription:\n short description of your template\n\n\nInstance type:\n the Amazon instance type to be used - we suggest to use at least small or medium instances\n\n\nVolume type:\n option to choose are SSD, regular HDD (both EBS) or Ephemeral\n\n\nAttached volumes per instance:\n the number of disks to be attached\n\n\nVolume size (GB):\n the size of the attached disks (in GB)\n\n\nSpot price:\n option to set a spot price - not mandatory, if specified we will request spot price instances (which might take a while or never be fulfilled by Amazon)\n\n\nEBS encryption:\n this feature is supported with all EBS volume types (General Purpose (SSD), Provisioned IOPS (SSD), and Magnetic\n\n\nPublic in account:\n share it with others in the account\n\n\nManage blueprints\n\n\nBlueprints are your declarative definition of a Hadoop cluster.\n\n\nName:\n name of your blueprint\n\n\nDescription:\n short description of your blueprint\n\n\nSource URL:\n you can add a blueprint by pointing to a URL. As an example you can use this \nblueprint\n.\n\n\nManual copy:\n you can copy paste your blueprint in this text area\n\n\nPublic in account:\n share it with others in the account\n\n\nManage networks\n\n\nManage networks allows you to create or reuse existing networks and configure them.\n\n\nName:\n name of the network\n\n\nDescription:\n short description of your network\n\n\nSubnet (CIDR):\n a subnet in the VPC with CIDR block\n\n\nAddress prefix (CIDR):\n the address space that is used for subnets\n\n\nPublic in account:\n share it with others in the account\n\n\nManage security groups\n\n\nSecurity groups allows configuration of traffic/access to the cluster. Currently there are two default groups, and later versions will allow setup of new groups.\n\n\nonly-ssh-and-ssl:\n all ports are locked down (you can't access Hadoop services outside of the VPN) but SSH (22) and HTTPS (443)\n\n\nall-services-port:\n all Hadoop services + SSH/HTTP are accessible by default: SSH (22) HTTPS (443) 8080 (Ambari) 8500 (Consul) 50070 (NN) 8088 (RM Web) 8030 (RM Scheduler) 8050 (RM IPC) 19888 (Job history server) 60010 (HBase master) 15000 (Falcon) 8744 (Storm) 11000 (Oozie) 18080 (Spark HS) 8042 (NM Web) 9996 (Zeppelin WebSocket) 9995 (Zeppelin UI) 3080 (Kibana) 9200 (Elasticsearch)\n\n\nCreate a cluster\n\n\nUsing the create cluster functionality Cloudbreak will create a cloud Stack and a Hadoop Cluster. In order to create a cluster you will have to select a credential first.\n\n\nCluster name:\n your cluster name\n\n\nRegion:\n the region where the cluster is started\n\n\nNetwork:\n the network template\n\n\n`Security Group:\" the security group\n\n\nBlueprint:\n your Hadoop cluster blueprint. Once the blueprint is selected we parse it and give you the option to select the followings for each \nhostgroup\n.\n\n\nHostgroup configuration\n\n\nGroup size:\n the number of instances to be started\n\n\nTemplate:\n the stack template associated to the hostgroup\n\n\nEnable security:\n Install KDC and Kerberize the cluster\n\n\nPublic in account:\n share it with others in the account\n\n\nAdvanced features\n:\n\n\nConsul server count:\n the number of Consul servers (odd number), by default is 3. It varies with the cluster size.\n\n\nMinimum cluster size:\n the provisioning strategy in case of the cloud provider can't allocate all the requested nodes\n\n\nValidate blueprint:\n feature to validate or not the Ambari blueprint. By default is switched on.\n\n\nAmbari Repository config:\n you can take the stack RPM's from a custom stack repository\n\n\nOnce you have launched the cluster creation you can track the progress either on Cloudbreak UI or your cloud provider management UI.", 
            "title": "GCP"
        }, 
        {
            "location": "/gcp/#gcp-based-installation", 
            "text": "We have pre-built a custom GCP image available on VM Depot with all the required tooling and Cloudbreak deployer installed. In order to launch this image on Azure please use the following  image .  Cloudbreak will already be installed, thus you can follow these steps to launch the application.", 
            "title": "GCP based installation"
        }, 
        {
            "location": "/gcp/#usage", 
            "text": "Once the Cloudbreak deployer is installed it will generate some config files and will download supporting binaries. It is\nadvised that you create a dedicated directory for it:  mkdir cloudbreak-deployment\ncd cloudbreak-deployment  Initialize Profile  First initialize your directory by creating a  Profile  file:  cbd init  It will create a  Profile  file in the current directory. Please edit the file - the only required\nconfiguration is the  PUBLIC_IP . This IP will be used to access the Cloudbreak UI\n(called Uluwatu). In some cases the  cbd  tool tries to guess it, if can't than will give a hint.  Start Cloudbreak  To start all the containers run:  cbd start  Launching the first time will take more time as it does some additional steps:   download all the docker images, needed by Cloudbreak.  create  docker-compose.yml : Full configuration of containers needed for the Cloudbreak deployment.  create  uaa.yml : Identity Server configuration.   Watch the logs  cbd logs", 
            "title": "Usage"
        }, 
        {
            "location": "/gcp/#default-credentials", 
            "text": "The default credentials can be revealed by  cbd login  These values are used in the  uaa.yml  end section. To change these values, add 2 lines into your Profile:  export UAA_DEFAULT_USER_EMAIL=myself@example.com\nexport UAA_DEFAULT_USER_PW=demo123  and than you need to recreate configs:  rm *.yml\ncbd generate", 
            "title": "Default Credentials"
        }, 
        {
            "location": "/gcp/#provider-specific-configurations", 
            "text": "Follow the  instructions  in Google Cloud's documentation to create a  Service account  and  Generate a new P12 key .  Make sure that at API level ( APIs and auth  menu) you have enabled:   Google Compute Engine  Google Compute Engine Instance Group Manager API  Google Compute Engine Instance Groups API  BigQuery API  Google Cloud Deployment Manager API  Google Cloud DNS API  Google Cloud SQL  Google Cloud Storage  Google Cloud Storage JSON API   When creating GCP credentials in Cloudbreak you will have to provide the email address of the Service Account and the project ID (from Google Developers Console - Projects) where the service account is created. You'll also have to upload the generated P12 file and provide an OpenSSH formatted public key that will be used as an SSH key.", 
            "title": "Provider specific configurations"
        }, 
        {
            "location": "/gcp/#manage-cloud-credentials", 
            "text": "You can now log into the Cloudbreak application at http://PUBLIC_IP:3000. Once logged in go to  Manage credentials . Using manage credentials will  link your cloud account with the Cloudbreak account.  Name:  name of your credential  Description:  short description of your linked credential  Project Id:  your GCP Project id - see Accounts  Service Account Email Address:  your GCP service account mail address - see Accounts  Service Account private (p12) key:  your GCP service account generated private key - see Accounts  SSH public key:  the SSH public key in OpenSSH format that's private keypair can be used to log into the launched instances later  Public in account:  share it with others in the account  The ssh username is cloudbreak.", 
            "title": "Manage cloud credentials"
        }, 
        {
            "location": "/gcp/#manage-resources", 
            "text": "Using manage resources you can create infrastructure templates. Templates describes the infrastructure where the HDP cluster will be provisioned. We support heterogenous clusters - this means that one cluster can be built by combining different templates.  Name:  name of your template  Description:  short description of your template  Instance type:  the Amazon instance type to be used - we suggest to use at least small or medium instances  Volume type:  option to choose are SSD, regular HDD (both EBS) or Ephemeral  Attached volumes per instance:  the number of disks to be attached  Volume size (GB):  the size of the attached disks (in GB)  Spot price:  option to set a spot price - not mandatory, if specified we will request spot price instances (which might take a while or never be fulfilled by Amazon)  EBS encryption:  this feature is supported with all EBS volume types (General Purpose (SSD), Provisioned IOPS (SSD), and Magnetic  Public in account:  share it with others in the account", 
            "title": "Manage resources"
        }, 
        {
            "location": "/gcp/#manage-blueprints", 
            "text": "Blueprints are your declarative definition of a Hadoop cluster.  Name:  name of your blueprint  Description:  short description of your blueprint  Source URL:  you can add a blueprint by pointing to a URL. As an example you can use this  blueprint .  Manual copy:  you can copy paste your blueprint in this text area  Public in account:  share it with others in the account", 
            "title": "Manage blueprints"
        }, 
        {
            "location": "/gcp/#manage-networks", 
            "text": "Manage networks allows you to create or reuse existing networks and configure them.  Name:  name of the network  Description:  short description of your network  Subnet (CIDR):  a subnet in the VPC with CIDR block  Address prefix (CIDR):  the address space that is used for subnets  Public in account:  share it with others in the account", 
            "title": "Manage networks"
        }, 
        {
            "location": "/gcp/#manage-security-groups", 
            "text": "Security groups allows configuration of traffic/access to the cluster. Currently there are two default groups, and later versions will allow setup of new groups.  only-ssh-and-ssl:  all ports are locked down (you can't access Hadoop services outside of the VPN) but SSH (22) and HTTPS (443)  all-services-port:  all Hadoop services + SSH/HTTP are accessible by default: SSH (22) HTTPS (443) 8080 (Ambari) 8500 (Consul) 50070 (NN) 8088 (RM Web) 8030 (RM Scheduler) 8050 (RM IPC) 19888 (Job history server) 60010 (HBase master) 15000 (Falcon) 8744 (Storm) 11000 (Oozie) 18080 (Spark HS) 8042 (NM Web) 9996 (Zeppelin WebSocket) 9995 (Zeppelin UI) 3080 (Kibana) 9200 (Elasticsearch)", 
            "title": "Manage security groups"
        }, 
        {
            "location": "/gcp/#create-a-cluster", 
            "text": "Using the create cluster functionality Cloudbreak will create a cloud Stack and a Hadoop Cluster. In order to create a cluster you will have to select a credential first.  Cluster name:  your cluster name  Region:  the region where the cluster is started  Network:  the network template  `Security Group:\" the security group  Blueprint:  your Hadoop cluster blueprint. Once the blueprint is selected we parse it and give you the option to select the followings for each  hostgroup .  Hostgroup configuration  Group size:  the number of instances to be started  Template:  the stack template associated to the hostgroup  Enable security:  Install KDC and Kerberize the cluster  Public in account:  share it with others in the account  Advanced features :  Consul server count:  the number of Consul servers (odd number), by default is 3. It varies with the cluster size.  Minimum cluster size:  the provisioning strategy in case of the cloud provider can't allocate all the requested nodes  Validate blueprint:  feature to validate or not the Ambari blueprint. By default is switched on.  Ambari Repository config:  you can take the stack RPM's from a custom stack repository  Once you have launched the cluster creation you can track the progress either on Cloudbreak UI or your cloud provider management UI.", 
            "title": "Create a cluster"
        }, 
        {
            "location": "/openstack/", 
            "text": "OpenStack based installation\n\n\nWe have pre-built a custom OpenStack image available on VM Depot with all the required tooling and Cloudbreak deployer installed. In order to launch this image on OpenStack please use the following \nimage\n.\n\n\nCloudbreak will already be installed, thus you can follow these steps to launch the application.\n\n\nUsage\n\n\nOnce the Cloudbreak deployer is installed it will generate some config files and will download supporting binaries. It is\nadvised that you create a dedicated directory for it:\n\n\nmkdir cloudbreak-deployment\ncd cloudbreak-deployment\n\n\n\n\nInitialize Profile\n\n\nFirst initialize your directory by creating a \nProfile\n file:\n\n\ncbd init\n\n\n\n\nIt will create a \nProfile\n file in the current directory. Please edit the file - the only required\nconfiguration is the \nPUBLIC_IP\n. This IP will be used to access the Cloudbreak UI\n(called Uluwatu). In some cases the \ncbd\n tool tries to guess it, if can't than will give a hint.\n\n\nStart Cloudbreak\n\n\nTo start all the containers run:\n\n\ncbd start\n\n\n\n\nLaunching the first time will take more time as it does some additional steps:\n\n\n\n\ndownload all the docker images, needed by Cloudbreak.\n\n\ncreate \ndocker-compose.yml\n: Full configuration of containers needed for the Cloudbreak deployment.\n\n\ncreate \nuaa.yml\n: Identity Server configuration.\n\n\n\n\nWatch the logs\n\n\ncbd logs\n\n\n\n\nDefault Credentials\n\n\nThe default credentials can be revealed by \ncbd login\n\n\nThese values are used in the \nuaa.yml\n end section. To change these values, add 2 lines into your Profile:\n\n\nexport UAA_DEFAULT_USER_EMAIL=myself@example.com\nexport UAA_DEFAULT_USER_PW=demo123\n\n\n\n\nand than you need to recreate configs:\n\n\nrm *.yml\ncbd generate\n\n\n\n\nProvider specific configurations\n\n\nManage cloud credentials\n\n\nYou can now log into the Cloudbreak application at http://PUBLIC_IP:3000. Once logged in go to \nManage credentials\n. Using manage credentials will  link your cloud account with the Cloudbreak account.\n\n\nName:\n name of your credential\n\n\nDescription:\n short description of your linked credential\n\n\nProject Id:\n your OpenStack Project id - see Accounts\n\n\nService Account Email Address:\n your OpenStack service account mail address - see Accounts\n\n\nService Account private (p12) key:\n your OpenStack service account generated private key - see Accounts\n\n\nSSH public key:\n the SSH public key in OpenSSH format that's private keypair can be used to log into the launched instances later\n\n\nPublic in account:\n share it with others in the account\n\n\nThe ssh username is cloudbreak.\n\n\nManage resources\n\n\nUsing manage resources you can create infrastructure templates. Templates describes the infrastructure where the HDP cluster will be provisioned. We support heterogenous clusters - this means that one cluster can be built by combining different templates.\n\n\nName:\n name of your template\n\n\nDescription:\n short description of your template\n\n\nInstance type:\n the Amazon instance type to be used - we suggest to use at least small or medium instances\n\n\nVolume type:\n option to choose are SSD, regular HDD (both EBS) or Ephemeral\n\n\nAttached volumes per instance:\n the number of disks to be attached\n\n\nVolume size (GB):\n the size of the attached disks (in GB)\n\n\nSpot price:\n option to set a spot price - not mandatory, if specified we will request spot price instances (which might take a while or never be fulfilled by Amazon)\n\n\nEBS encryption:\n this feature is supported with all EBS volume types (General Purpose (SSD), Provisioned IOPS (SSD), and Magnetic\n\n\nPublic in account:\n share it with others in the account\n\n\nManage blueprints\n\n\nBlueprints are your declarative definition of a Hadoop cluster.\n\n\nName:\n name of your blueprint\n\n\nDescription:\n short description of your blueprint\n\n\nSource URL:\n you can add a blueprint by pointing to a URL. As an example you can use this \nblueprint\n.\n\n\nManual copy:\n you can copy paste your blueprint in this text area\n\n\nPublic in account:\n share it with others in the account\n\n\nManage networks\n\n\nManage networks allows you to create or reuse existing networks and configure them.\n\n\nName:\n name of the network\n\n\nDescription:\n short description of your network\n\n\nSubnet (CIDR):\n a subnet in the VPC with CIDR block\n\n\nAddress prefix (CIDR):\n the address space that is used for subnets\n\n\nPublic in account:\n share it with others in the account\n\n\nManage security groups\n\n\nSecurity groups allows configuration of traffic/access to the cluster. Currently there are two default groups, and later versions will allow setup of new groups.\n\n\nonly-ssh-and-ssl:\n all ports are locked down (you can't access Hadoop services outside of the VPN) but SSH (22) and HTTPS (443)\n\n\nall-services-port:\n all Hadoop services + SSH/HTTP are accessible by default: SSH (22) HTTPS (443) 8080 (Ambari) 8500 (Consul) 50070 (NN) 8088 (RM Web) 8030 (RM Scheduler) 8050 (RM IPC) 19888 (Job history server) 60010 (HBase master) 15000 (Falcon) 8744 (Storm) 11000 (Oozie) 18080 (Spark HS) 8042 (NM Web) 9996 (Zeppelin WebSocket) 9995 (Zeppelin UI) 3080 (Kibana) 9200 (Elasticsearch)\n\n\nCreate a cluster\n\n\nUsing the create cluster functionality Cloudbreak will create a cloud Stack and a Hadoop Cluster. In order to create a cluster you will have to select a credential first.\n\n\nCluster name:\n your cluster name\n\n\nRegion:\n the region where the cluster is started\n\n\nNetwork:\n the network template\n\n\n`Security Group:\" the security group\n\n\nBlueprint:\n your Hadoop cluster blueprint. Once the blueprint is selected we parse it and give you the option to select the followings for each \nhostgroup\n.\n\n\nHostgroup configuration\n\n\nGroup size:\n the number of instances to be started\n\n\nTemplate:\n the stack template associated to the hostgroup\n\n\nEnable security:\n Install KDC and Kerberize the cluster\n\n\nPublic in account:\n share it with others in the account\n\n\nAdvanced features\n:\n\n\nConsul server count:\n the number of Consul servers (odd number), by default is 3. It varies with the cluster size.\n\n\nMinimum cluster size:\n the provisioning strategy in case of the cloud provider can't allocate all the requested nodes\n\n\nValidate blueprint:\n feature to validate or not the Ambari blueprint. By default is switched on.\n\n\nAmbari Repository config:\n you can take the stack RPM's from a custom stack repository\n\n\nOnce you have launched the cluster creation you can track the progress either on Cloudbreak UI or your cloud provider management UI.", 
            "title": "OpenStack"
        }, 
        {
            "location": "/openstack/#openstack-based-installation", 
            "text": "We have pre-built a custom OpenStack image available on VM Depot with all the required tooling and Cloudbreak deployer installed. In order to launch this image on OpenStack please use the following  image .  Cloudbreak will already be installed, thus you can follow these steps to launch the application.", 
            "title": "OpenStack based installation"
        }, 
        {
            "location": "/openstack/#usage", 
            "text": "Once the Cloudbreak deployer is installed it will generate some config files and will download supporting binaries. It is\nadvised that you create a dedicated directory for it:  mkdir cloudbreak-deployment\ncd cloudbreak-deployment  Initialize Profile  First initialize your directory by creating a  Profile  file:  cbd init  It will create a  Profile  file in the current directory. Please edit the file - the only required\nconfiguration is the  PUBLIC_IP . This IP will be used to access the Cloudbreak UI\n(called Uluwatu). In some cases the  cbd  tool tries to guess it, if can't than will give a hint.  Start Cloudbreak  To start all the containers run:  cbd start  Launching the first time will take more time as it does some additional steps:   download all the docker images, needed by Cloudbreak.  create  docker-compose.yml : Full configuration of containers needed for the Cloudbreak deployment.  create  uaa.yml : Identity Server configuration.   Watch the logs  cbd logs", 
            "title": "Usage"
        }, 
        {
            "location": "/openstack/#default-credentials", 
            "text": "The default credentials can be revealed by  cbd login  These values are used in the  uaa.yml  end section. To change these values, add 2 lines into your Profile:  export UAA_DEFAULT_USER_EMAIL=myself@example.com\nexport UAA_DEFAULT_USER_PW=demo123  and than you need to recreate configs:  rm *.yml\ncbd generate", 
            "title": "Default Credentials"
        }, 
        {
            "location": "/openstack/#provider-specific-configurations", 
            "text": "", 
            "title": "Provider specific configurations"
        }, 
        {
            "location": "/openstack/#manage-cloud-credentials", 
            "text": "You can now log into the Cloudbreak application at http://PUBLIC_IP:3000. Once logged in go to  Manage credentials . Using manage credentials will  link your cloud account with the Cloudbreak account.  Name:  name of your credential  Description:  short description of your linked credential  Project Id:  your OpenStack Project id - see Accounts  Service Account Email Address:  your OpenStack service account mail address - see Accounts  Service Account private (p12) key:  your OpenStack service account generated private key - see Accounts  SSH public key:  the SSH public key in OpenSSH format that's private keypair can be used to log into the launched instances later  Public in account:  share it with others in the account  The ssh username is cloudbreak.", 
            "title": "Manage cloud credentials"
        }, 
        {
            "location": "/openstack/#manage-resources", 
            "text": "Using manage resources you can create infrastructure templates. Templates describes the infrastructure where the HDP cluster will be provisioned. We support heterogenous clusters - this means that one cluster can be built by combining different templates.  Name:  name of your template  Description:  short description of your template  Instance type:  the Amazon instance type to be used - we suggest to use at least small or medium instances  Volume type:  option to choose are SSD, regular HDD (both EBS) or Ephemeral  Attached volumes per instance:  the number of disks to be attached  Volume size (GB):  the size of the attached disks (in GB)  Spot price:  option to set a spot price - not mandatory, if specified we will request spot price instances (which might take a while or never be fulfilled by Amazon)  EBS encryption:  this feature is supported with all EBS volume types (General Purpose (SSD), Provisioned IOPS (SSD), and Magnetic  Public in account:  share it with others in the account", 
            "title": "Manage resources"
        }, 
        {
            "location": "/openstack/#manage-blueprints", 
            "text": "Blueprints are your declarative definition of a Hadoop cluster.  Name:  name of your blueprint  Description:  short description of your blueprint  Source URL:  you can add a blueprint by pointing to a URL. As an example you can use this  blueprint .  Manual copy:  you can copy paste your blueprint in this text area  Public in account:  share it with others in the account", 
            "title": "Manage blueprints"
        }, 
        {
            "location": "/openstack/#manage-networks", 
            "text": "Manage networks allows you to create or reuse existing networks and configure them.  Name:  name of the network  Description:  short description of your network  Subnet (CIDR):  a subnet in the VPC with CIDR block  Address prefix (CIDR):  the address space that is used for subnets  Public in account:  share it with others in the account", 
            "title": "Manage networks"
        }, 
        {
            "location": "/openstack/#manage-security-groups", 
            "text": "Security groups allows configuration of traffic/access to the cluster. Currently there are two default groups, and later versions will allow setup of new groups.  only-ssh-and-ssl:  all ports are locked down (you can't access Hadoop services outside of the VPN) but SSH (22) and HTTPS (443)  all-services-port:  all Hadoop services + SSH/HTTP are accessible by default: SSH (22) HTTPS (443) 8080 (Ambari) 8500 (Consul) 50070 (NN) 8088 (RM Web) 8030 (RM Scheduler) 8050 (RM IPC) 19888 (Job history server) 60010 (HBase master) 15000 (Falcon) 8744 (Storm) 11000 (Oozie) 18080 (Spark HS) 8042 (NM Web) 9996 (Zeppelin WebSocket) 9995 (Zeppelin UI) 3080 (Kibana) 9200 (Elasticsearch)", 
            "title": "Manage security groups"
        }, 
        {
            "location": "/openstack/#create-a-cluster", 
            "text": "Using the create cluster functionality Cloudbreak will create a cloud Stack and a Hadoop Cluster. In order to create a cluster you will have to select a credential first.  Cluster name:  your cluster name  Region:  the region where the cluster is started  Network:  the network template  `Security Group:\" the security group  Blueprint:  your Hadoop cluster blueprint. Once the blueprint is selected we parse it and give you the option to select the followings for each  hostgroup .  Hostgroup configuration  Group size:  the number of instances to be started  Template:  the stack template associated to the hostgroup  Enable security:  Install KDC and Kerberize the cluster  Public in account:  share it with others in the account  Advanced features :  Consul server count:  the number of Consul servers (odd number), by default is 3. It varies with the cluster size.  Minimum cluster size:  the provisioning strategy in case of the cloud provider can't allocate all the requested nodes  Validate blueprint:  feature to validate or not the Ambari blueprint. By default is switched on.  Ambari Repository config:  you can take the stack RPM's from a custom stack repository  Once you have launched the cluster creation you can track the progress either on Cloudbreak UI or your cloud provider management UI.", 
            "title": "Create a cluster"
        }
    ]
}